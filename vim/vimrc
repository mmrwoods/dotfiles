call pathogen#infect()

set nocompatible                  " Must come first because it changes other options.

set encoding=utf-8                " Force utf8
set nobomb                        " but don't bother with a BOM

set nomodeline

set cursorline                    " Highlight the cursor line

set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set wildignore=*~,*.o,*.log,*.aux,*.dvi,*.pdf

" default to two spaces rather than tabs
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab

set ttyfast                       " Assume a fast terminal connection

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
"set hlsearch                      " Highlight matches.

set nowrap                        " Turn off line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %=%-(line:\ %l\ \ col:\ %c%)\ \ %3P

set t_Co=256
set background=dark
if $SSH_CLIENT == ""
  colorscheme solarized
else
  colorscheme jellybeans
endif

" use F2 to toggle paste mode and safely paste multiple lines in terminal vim
set pastetoggle=<F2>

" store tabs, windows, buffers etc. in sessions
set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize,winpos,resize

" save globals with viminfo - sessionman stores last session info in global
set viminfo='100,<50,s10,h,!

" set list mode characters used to display whitespace
set listchars=tab:→·,trail:·,eol:¶

" don't automatically save session on exit in non-gui vim
let sessionman_save_on_exit=0

" show private gists when listing mine
let g:gist_show_privates = 1

" Don't add the recent files menu from MRU plugin
let MRU_Add_Menu = 0

" Make sure tagbar uses exuberant ctags
if filereadable('/usr/local/bin/ctags')
  let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
endif

" Show relative rather than absolute paths by default in bufexplorer
let g:bufExplorerShowRelativePath = 1

" Ignore some files to make CtrlP load faster
set wildignore+=*.gif,*.jpg,*.png
set wildignore+=tmp/**
set wildignore+=log/**
set wildignore+=vendor/**
set wildignore+=public/images/**
set wildignore+=app/assets/fonts/**
set wildignore+=coverage/**

" Delete key sends text to blackhole register
nmap <Del> "_x
vmap <Del> "_x

" map leader to comma so it's in the same position on all keyboards
let mapleader = ","

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tm :tabmove
map <C-Tab> :tabnext<cr>
map <S-C-Tab> :tabprevious<cr>

" Session mappings
map <leader>s :SessionList<CR>
map <leader>ss :SessionSave<CR>

" Buffer mappings.
map <C-home> :bn<CR>
map <C-end> :bp<CR>
map <leader>b :BufExplorer<CR>
map <leader>bn :bn<CR>
map <leader>bp :bp<CR>

" open alternate file
nnoremap <Leader>g :e#<CR>

" Window mappings
" opening new splits
map <silent> <leader>w :wincmd v\|wincmd w<CR>
map <silent> <leader>ws :wincmd s\|wincmd w<CR>
map <silent> <leader>wv :wincmd v\|wincmd w<CR>
" moving windows (rotate and exchange)
map <silent> <leader>wr :wincmd r<CR>
map <silent> <leader>wx :wincmd x<CR>
" rudimentary navigation
map <silent> <leader>ww :wincmd w<CR>
" movemement with arrow keys
map <silent> <C-Up> :wincmd k<CR>
map <silent> <C-Down> :wincmd j<CR>
map <silent> <C-Left> :wincmd h<CR>
map <silent> <C-Right> :wincmd l<CR>
" movement with hjkl
map <silent> <C-k> :wincmd k<CR>
map <silent> <C-j> :wincmd j<CR>
map <silent> <C-h> :wincmd h<CR>
map <silent> <C-l> :wincmd l<CR>
" resize all windows
map <silent> <leader>= :wincmd =<CR>

" Shortcut to search files with ack
nnoremap <Leader>f :Ack!<Space>

" Toggle list mode (show whitespace characters)
nmap <leader>l :set list!<CR>

" Hard wrap selected text in visual mode using external fold command
vmap <leader>f :!fold -s<CR>

" Toggle tagbar (outline view)
map <leader>o :TagbarToggle<Enter>

" Toggle NERDTree
map <leader>n :NERDTreeToggle<Enter>

" Toggle ZoomWin
map <leader>z :ZoomWin<Enter>

" Toggle SpaceHi
map <leader><space> :ToggleSpaceHi<Enter>

" Open most recently used files
map <leader>m :MRU<Enter>

if has("spell")
  " toggle spelling use ,sp
  imap <Leader>sp <C-o>:setlocal spell! spelllang=en_gb<CR>
  nmap <Leader>sp :setlocal spell! spelllang=en_gb<CR>
endif

" Workarounds for rendering glitches with quickfix windows on macvim
" See https://code.google.com/p/macvim/issues/detail?id=409
"
" Type ,, to quickly redraw screen when rendering has borked
map <leader>, :redraw!<CR>
" Automatically redraw screen when entering and exiting CtrlP
let g:ctrlp_buffer_func = {
  \ 'enter': 'RedrawScreen',
  \ 'exit':  'RedrawScreen',
  \ }
function RedrawScreen()
  exec 'redraw!'
endfunction

if has('mouse') && has("clipboard")
  set mouse=a

  " yank to and paste from system clipboard if possible
  if has("x11") && ( v:version >= 704 || v:version == 703 && has("patch074") )
    set clipboard=unnamedplus
  else
    set clipboard=unnamed
  endif

  " Use windows keyboard shortcuts (taken from mswin.vim)
  " CTRL-X and SHIFT-Del are Cut
  vmap <C-X> "+x
  vmap <S-Del> "+x
  " CTRL-C and CTRL-Insert are Copy
  vmap <C-C> "+y
  vmap <C-Insert> "+y
  " CTRL-V and SHIFT-Insert are Paste
  map <C-V> "+gP
  map <S-Insert> "+gP
  cmap <C-V> <C-R>+
  cmap <S-Insert> <C-R>+
  exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
  exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

  " Make the mouse/trackpad work in terminal
  " See https://wincent.com/blog/tweaking-command-t-and-vim-for-use-in-the-terminal-and-tmux
  if &term =~ "xterm" || &term =~ "screen"
    " as of March 2013, this works:
    set ttymouse=xterm2

    " previously, I found that ttymouse was getting reset, so had
    " to reapply it via an autocmd like this:
    autocmd VimEnter,FocusGained,BufEnter * set ttymouse=xterm2
  endif
endif

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" Vimcast 4 - Tidying Whitespace
" Function and autocmd to strip trailing whitespace from files when saving
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
" enable whitespace stripping for known file types by default
autocmd FileType * let b:strip_trailing_whitespaces=1
" disable whitespace stripping for other file types as needed
autocmd FileType markdown let b:strip_trailing_whitespaces=0
" strip whitespace before writing if option enabled for buffer
autocmd BufWritePre *
  \ if exists('b:strip_trailing_whitespaces') && b:strip_trailing_whitespaces |
  \   call <SID>StripTrailingWhitespaces() |
  \ endif

" Allow semi-colon to stand in for colon
nnoremap ; :

" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

function SetWorkingDir()
  if argc() != 0
    if isdirectory(argv(0))
      exec 'cd' argv(0)
    elseif filereadable(argv(0))
      exec 'cd %:p:h'
    end
  endif
endfunction
autocmd VimEnter * call SetWorkingDir()
