call pathogen#infect()

set nocompatible                  " Must come first because it changes other options.

set encoding=utf-8                " Force utf8
set nobomb                        " but don't bother with a BOM

set nomodeline

set cursorline                    " Highlight the cursor line

set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set wildignore=*~,*.o,*.log,*.aux,*.dvi,*.pdf

" default to two spaces rather than tabs
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab

set ttyfast                       " Assume a fast terminal connection

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
"set hlsearch                      " Highlight matches.

set nowrap                        " Turn off line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-40(\ \ char:\ %03.3b\/%02.2B\ \ col:\ %c-%v\ \ line:\ %l-%L\ %)\ %P

set t_Co=256
"colorscheme wombat256mod
set background=dark
colorscheme solarized

" use F2 to toggle paste mode and safely paste multiple lines in terminal vim
set pastetoggle=<F2>

" store tabs, windows, buffers etc. in sessions
set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize,winpos,resize

" save globals with viminfo - sessionman stores last session info in global
set viminfo='100,<50,s10,h,!

" don't automatically save session on exit in non-gui vim
let sessionman_save_on_exit=0

" show private gists when listing mine
let g:gist_show_privates = 1

" Don't add the recent files menu from MRU plugin
let MRU_Add_Menu = 0

"let TList_Auto_Open = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Show_One_File = 1
if filereadable('/usr/local/bin/ctags')
  let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
endif
"let tlist_spec_settings = 'Rspec;c:describe;d:context;f:it'

" Show relative rather than absolute paths by default in bufexplorer
let g:bufExplorerShowRelativePath = 1

" Delete key sends text to blackhole register
nmap <Del> "_x
vmap <Del> "_x

" map leader to comma so it's in the same position on all keyboards
let mapleader = ","

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tm :tabmove
map <C-Tab> :tabnext<cr>
map <S-C-Tab> :tabprevious<cr>

" Session mappings
map <leader>s :SessionList<CR>
map <leader>ss :SessionSave<CR>

" Buffer mappings.
map <C-home> :bn<CR>
map <C-end> :bp<CR>
map <leader>b :BufExplorer<CR>
map <leader>bn :bn<CR>
map <leader>bp :bp<CR>

" open alternate file with <leader>g
nnoremap <Leader>g :e#<CR>

" Window mappings
" opening new splits
map <silent> <leader>w :wincmd v\|wincmd w<CR>
map <silent> <leader>ws :wincmd s\|wincmd w<CR>
map <silent> <leader>wv :wincmd v\|wincmd w<CR>
" rudimentary movement
map <silent> <leader>ww :wincmd w<CR>
" movemement with arrow keys
map <silent> <C-Up> :wincmd k<CR>
map <silent> <C-Down> :wincmd j<CR>
map <silent> <C-Left> :wincmd h<CR>
map <silent> <C-Right> :wincmd l<CR>
" movement with hjkl
map <silent> <C-k> :wincmd k<CR>
map <silent> <C-j> :wincmd j<CR>
map <silent> <C-h> :wincmd h<CR>
map <silent> <C-l> :wincmd l<CR>
" resize all windows with <leader>=
map <silent> <leader>= :wincmd =<CR>

" Go to File (command-t plugin)
nnoremap <silent> <Leader>t :CommandT<CR>
nnoremap <silent> <Leader>tb :CommandTBuffer<CR>
nnoremap <Leader>tf :CommandTFlush<CR>

" Shortcut to search files with ack
nnoremap <Leader>f :Ack<Space>

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Hard wrap selected text in visual mode with <leader>f
" Note: uses extenal fold command, column width is 80
vmap <leader>f :!fold -s<CR>

" Toggle taglist (outline view) with <leader>o
map <leader>o :TlistToggle<Enter>

" Toggle NERDTree with <leader>n
map <leader>n :NERDTreeToggle<Enter>

" Toggle ZoomWin with <leader>z
map <leader>z :ZoomWin<Enter>

" Toggle SpaceHi with <leader><space>
map <leader><space> :ToggleSpaceHi<Enter>

" Open most recently used files list with <leader>r
map <leader>r :MRU<Enter>

if has("spell")
  " toggle spelling use ,sp
  imap <Leader>sp <C-o>:setlocal spell! spelllang=en_gb<CR>
  nmap <Leader>sp :setlocal spell! spelllang=en_gb<CR>
endif

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" Vimcast 4 - Tidying Whitespace
" Function and autocmd to strip trailing whitespace from files when saving
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre *.rb,*.erb,*.rhtml,*.html,*haml,*.markdown,*.feature :call <SID>StripTrailingWhitespaces()

" Allow semi-colon to stand in for colon
nnoremap ; :

" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

function SetWorkingDir()
  if argc() != 0
    if isdirectory(argv(0))
      exec 'cd' argv(0)
    elseif filereadable(argv(0))
      exec 'cd %:h'
    end
  endif
endfunction
autocmd VimEnter * call SetWorkingDir()
