call pathogen#infect()

set nocompatible                  " Disable vi compatibility (must come first)

set encoding=utf-8                " Force utf8
set nobomb                        " but don't bother with a BOM

set nomodeline                    " No modelines (potential for security issues)

set cursorline                    " Highlight the cursor line

set ttyfast                       " Assume a fast terminal connection

runtime macros/matchit.vim        " Load the matchit plugin

syntax enable                     " Turn on syntax highlighting
filetype plugin indent on         " Turn on file type detection and indentation

set autoindent                    " Auto-indent if no file type specific indent

set expandtab ts=2 sts=2 sw=2     " Default to two-space indent, no tabs

set showcmd                       " Show incomplete commands as you type
set showmode                      " Show mode when insert, replace or visual

set backspace=indent,eol,start    " Intuitive backspacing

set hidden                        " Allow hidden buffers with unsaved changes

set wildmenu                      " Enhanced command line completion
set wildmode=list:longest         " Complete files like a shell

set ignorecase                    " Ignore case when searching
set smartcase                     " Except when search contains capital letters
set infercase                     " And infer case when doing keyword completion

if exists("&fileignorecase")
  set nofileignorecase            " Make file name completion case-sensitive
endif

set number                        " Show line numbers in left margin
set ruler                         " Show cursor position in default status line

set incsearch                     " Highlight search match as you type
set nohlsearch                    " But clear highlighting once search completed

set nowrap                        " Turn off line wrapping by default
set scrolloff=3                   " Show 3 lines of context around the cursor

set title                         " Set the terminal's title

set visualbell                    " No beeping

set confirm                       " Allow dialog to confirm an action
set autoread                      " Skip confirm for file changed outside vim
set writeany                      " Allow writing of any file without confirm

set writebackup                   " Create backups before overwriting files
set nobackup                      " But don't retain backups after writing
set directory=$HOME/.vim/tmp//    " Keep swap files in one location
set backupdir=$HOME/.vim/tmp//    " And backups in the same place

set laststatus=2                  " Show the status line all the time

set splitright                    " Open vertical splits to the right
set splitbelow                    " Open horizontal splits below

set t_Co=256                      " Assume a 256 color terminal

set background=dark               " Use dark background in terminal vim
if $SSH_CLIENT == ""
  colorscheme solarized           " With solarized colour scheme locally
else
  colorscheme jellybeans          " And jellybeans when running remotely
endif

set nofoldenable                  " Open all folds by default

" Suffixes that can be ignored when completing file names
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" Patterns that should be ignored when expanding wildcards
set wildignore=*~,*.o,*.log,*.aux,*.dvi,*.pdf,*.gif,*.jpg,*.png

" Custom status line, show relative file path and file type
set statusline=%<%.99f\ %h%w%m%r\ %=\ %{&ft}\ %l\:\%-c\ %P

" toggle paste mode to safely paste from clipboard in terminal vim
set pastetoggle=<F2>

" store tabs, windows, buffers etc. in sessions
set sessionoptions=blank,buffers,curdir,tabpages,winsize,winpos,resize

" save globals with viminfo - sessionman stores last session info in global
set viminfo='100,<50,s10,h,!

" set list mode characters used to display whitespace
set listchars=tab:→·,trail:·,eol:¶

" Insert mode completion options - always show completion menu, even if
" there is just one match, and only autocomplete to longest common match
set completeopt=menuone,longest,preview

" Use Space to close completion menu and go back to original text
" I'd prefer to use Esc, but things got weird when I tried Esc
inoremap <expr> <Space> pumvisible() ? '<C-e>' : '<Space>'

" don't automatically save session on exit in non-gui vim
let sessionman_save_on_exit=0

" show private gists when listing mine
let g:gist_show_privates = 1

" Don't add the recent files menu from MRU plugin
let MRU_Add_Menu = 0

" Make sure tagbar uses exuberant ctags
if filereadable('/usr/local/bin/ctags')
  let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
endif

" Show relative paths by default in bufexplorer
let g:bufExplorerShowRelativePath = 1

" Show no name buffers by default in bufexplorer
let g:bufExplorerShowNoName = 1

" Disable default BufExplorer key mappings (use <leader>b to open BufExplorer)
let g:bufExplorerDisableDefaultKeyMapping=1

" Close conqueterm buffer when program exits
let g:ConqueTerm_CloseOnEnd = 1

" Let supertab guess the completion type from current context
let g:SuperTabDefaultCompletionType = "context"
" Use keyword completion if the context can't be determined
let g:SuperTabContextDefaultCompletionType = "<c-n>"
" Fall back to keyword completion when omni completion fails
autocmd FileType *
  \ if &omnifunc != '' |
  \   call SuperTabChain(&omnifunc, "<c-n>") |
  \ endif
" Use opening and closing tags to trigger html omnicompletion
autocmd FileType html,xhtml
  \ let b:SuperTabContextTextMemberPatterns = ['<', '</']

" Don't automagically colorize text, use <leader>tc to toggle
let g:colorizer_startup = 0

" Preserve missing EOL at end of text files
let g:PreserveNoEOL = 1

" Disable delimitMate within comments and strings (default is comments)
let delimitMate_excluded_regions = "Comment,String"

" Ignore some additional files to make CtrlP load faster
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](tmp|log|vendor|coverage|images|fonts)$'
  \ }

" Use the current vim working directory as the CtrlP working directory
let g:ctrlp_working_path_mode = 0

" Let CtrlP reuse nofile buffers when opening files (e.g. BufExplorer)
let g:ctrlp_reuse_window = 'netrw\|nofile'

" map leader to comma so it's in the same position on all keyboards
let mapleader = ","

" Delete key sends text to blackhole register
nmap <Del> "_x
vmap <Del> "_x

" Make Y act like D and C, i.e. yank until EOL rather than yank entire line
map Y y$

" Allow semi-colon to stand in for colon
nnoremap ; :

" Stop opening the command line history by accident
nnoremap q: :q

" Retain selection after shifting highlighted lines in visual mode
vnoremap > >gv
vnoremap < <gv

" Allow standard windows & gnome shortcuts to shift lines (for pairing)
vmap <Tab> >
vmap <S-Tab> <

" Tab mappings
" opening new tabs
map <leader><tab> :tabnew<cr>
map <leader>t :tabnew<cr>
" rudimentary navigation
map <leader>tt :tabnext<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
" navigation with Ctrl-Tab (only works in gui vim)
map <C-Tab> :tabnext<cr>
map <S-C-Tab> :tabprevious<cr>
" navigation and moving using arrow keys
map <S-C-Up> :tabmove +1<cr>
map <S-C-Down> :tabmove -1<cr>
map <S-C-Right> :tabnext<cr>
map <S-C-Left> :tabprevious<cr>

" Session mappings
map <leader>s :SessionSave<CR>:SessionList<CR>
map <leader>sl :SessionList<CR>
map <leader>ss :SessionSave<CR>

" Buffer mappings
map <leader>b :BufExplorer<CR>
map <leader>wa :Wipeout<CR>

" open alternate file
nnoremap <Leader>g :e#<CR>

" Window mappings
" opening alternate file in new vertial split
map <silent> <expr> <leader>w expand('#')!='' ? ':wincmd v\|e#<CR>' : ':wincmd v<CR>'
" shortcuts for opening new splits
map <silent> <leader>ws :wincmd s<CR>
map <silent> <leader>wv :wincmd v<CR>
" moving windows (rotate and exchange)
map <silent> <leader>wr :wincmd r<CR>
map <silent> <leader>wx :wincmd x<CR>
" rudimentary navigation
map <silent> <leader>ww :wincmd w<CR>
map <silent> <leader>wn :wincmd w<CR>
map <silent> <leader>wp :wincmd p<CR>
" movemement with arrow keys
map <silent> <C-Up> :wincmd k<CR>
map <silent> <C-Down> :wincmd j<CR>
map <silent> <C-Left> :wincmd h<CR>
map <silent> <C-Right> :wincmd l<CR>
" resize all windows
map <silent> <leader>= :wincmd =<CR>
" jump to definition of keyword under cursor in next split
nmap <silent> <C-\> :let word=expand("<cword>")<CR>:wincmd w<CR>:exec "tag" word<CR>

" Shortcut to search files with ack
nnoremap <Leader>f :Ack!<Space>

" Run ctags to (re)generate tags file
map <Leader>ct :!ctags -R .<CR>

" Toggle list mode (show whitespace using listchars)
nmap <leader>l :set list!<CR>

" Toggle tagbar (outline view)
map <leader>o :TagbarToggle<Enter>

" Toggle NERDTree
map <leader>n :NERDTreeToggle<Enter>

" Toggle ZoomWin
map <leader>z :ZoomWin<Enter>

" Toggle SpaceHi
map <leader><space> :ToggleSpaceHi<Enter>

" Open most recently used files
map <leader>m :MRU<Enter>

" Toggle spell checking
imap <Leader>sp <C-o>:setlocal spell! spelllang=en_gb<CR>
nmap <Leader>sp :setlocal spell! spelllang=en_gb<CR>

" Open a login shell in a new split
command! Bash ConqueTermSplit bash -l
map <leader>sh :Bash<CR>

" Remove current search highlighting when redrawing screen
map <C-L> :nohl<CR>:redraw!<CR>

if has('mouse') && has("clipboard")
  set mouse=a

  " yank to and paste from system clipboard if possible
  if has("x11") && ( v:version >= 704 || v:version == 703 && has("patch074") )
    set clipboard=unnamedplus
  else
    set clipboard=unnamed
  endif

  " Use windows keyboard shortcuts (taken from mswin.vim)
  " CTRL-X and SHIFT-Del are Cut
  vmap <C-X> "+x
  vmap <S-Del> "+x
  " CTRL-C and CTRL-Insert are Copy
  vmap <C-C> "+y
  vmap <C-Insert> "+y
  " CTRL-V and SHIFT-Insert are Paste
  map <C-V> "+gP
  map <S-Insert> "+gP
  cmap <C-V> <C-R>+
  cmap <S-Insert> <C-R>+
  exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
  exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

  " Make the mouse/trackpad work in terminal
  " See https://wincent.com/blog/tweaking-command-t-and-vim-for-use-in-the-terminal-and-tmux
  if &term =~ "xterm" || &term =~ "screen"
    " as of March 2013, this works:
    set ttymouse=xterm2

    " previously, I found that ttymouse was getting reset, so had
    " to reapply it via an autocmd like this:
    autocmd VimEnter,FocusGained,BufEnter * set ttymouse=xterm2
  endif
endif

" Additional ruby syntax highlighting
autocmd BufRead,BufNewFile {Gemfile,Rakefile,Capfile,Vagrantfile,Thorfile,pryrc,config.ru}
  \ set ft=ruby |

" Add json syntax highlighting
" autocmd BufNewFile,BufRead *.json set filetype=javascript

" Turn on spell checking by default for git commits
autocmd FileType gitcommit setlocal spell spelllang=en_gb

" Automatically wrap markdown text at 80 characters
autocmd FileType markdown setlocal textwidth=80

" Use html omnicompletion for xhtml documents
autocmd FileType xhtml set omnifunc=htmlcomplete#CompleteTags

" Use syntax based completion when no omnicompletion available
if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
    \	if &omnifunc == "" |
    \	  setlocal omnifunc=syntaxcomplete#Complete |
    \	endif
  endif

" Vimcast 4 - Tidying Whitespace
" Function and autocmd to strip trailing whitespace from files when saving
function! <SID>StripTrailingWhitespace()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
" enable whitespace stripping for known file types by default
autocmd FileType * let b:strip_trailing_whitespace=1
" disable whitespace stripping for other file types as needed
autocmd FileType markdown let b:strip_trailing_whitespace=0
" enable whitespace stripping globally by default
let g:strip_trailing_whitespace=1
" strip whitespace before writing if enabled globally and for buffer
autocmd BufWritePre *
  \ if ( exists('g:strip_trailing_whitespace') && g:strip_trailing_whitespace )
  \ && ( exists('b:strip_trailing_whitespace') && b:strip_trailing_whitespace ) |
  \   call <SID>StripTrailingWhitespace() |
  \ endif

" Subtly highlight long lines using background tones from solarized color scheme
" TODO: customise based on textwidth, be less subtle, work without solarized
if exists('g:colors_name') && g:colors_name == 'solarized'
  autocmd FileType * highlight longLines ctermbg=black guibg=#eee8d5
  autocmd FileType *
    \ if &ft != 'qf' && &ft != '' |
    \   match longLines /\%>80v.\+/ |
    \ endif
endif

" Jump to last known cursor position when editing (except for git commits)
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft != 'gitcommit' |
  \   exe "normal! g`\"" |
  \ endif

" Diff a buffer with the file from which it was originally loaded
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif

" Set working directory when opening vim to edit a particular file
function! <SID>SetWorkingDir()
  if argc() != 0
    if isdirectory(argv(0))
      exec 'cd' argv(0)
    elseif filereadable(argv(0))
      exec 'cd %:p:h'
    end
  endif
endfunction
autocmd VimEnter * call <SID>SetWorkingDir()
