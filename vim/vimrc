source ~/.vim/vimrc.minimal
scriptencoding utf-8
set loadplugins

set nomodeline                    " No modelines (potential for security issues)

set textwidth=80                  " Default textwidth, override using .editorconfig

set directory=$HOME/.vim/tmp//    " Keep swap files in one location
set backupdir=$HOME/.vim/tmp//    " And backups in the same place

if has('gui_running')
  colorscheme PaperColor          " High contrast light bg colors for gui
elseif $TERM_PROGRAM =~# 'iTerm'
  colorscheme onedark             " Match dark iTerm color scheme locally
elseif $SSH_CLIENT != ''
  colorscheme elflord             " Distinct color scheme for ssh sessions
else
  colorscheme dim                 " Default IMproved color scheme elsewhere
endif

set nofoldenable                  " Open all folds by default
set foldlevel=99                  " Don't open/close all folds at same indent
set foldlevelstart=99             " Reset fold level when opening new files
set foldmethod=indent             " Keep it simple stupid, just fold on indent
set foldignore=''                 " Don't ignore # when folding on indent
set foldtext=getline(v:foldstart) " Minimalist fold text, no line count etc.

set updatetime=1000               " Default updatetime for gitgutter and friends

" Sign column configuration - condition copied from coc.nvim readme
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Merge sign column and number column if supported
  set signcolumn=number
else
  " Otherwise at least use same colours as number column
  hi! link SignColumn LineNr
endif

" Custom status line, show relative file path and file type
set statusline=%<%.99{expand('%:~:.')}\ \%h%w%m%r\ %=\ %{CocStatus()}\ %{substitute(SleuthIndicator(),',','\ ','')}\ %{&ft}\ %l\:\%-c\ %P

if exists('##ModeChanged')
  " Keep timeoutlen short enough to make WhichKey menu appear promptly, but not
  " so short that it makes it almost impossible to complete multi-key mappings
  set timeoutlen=500
  " But increase timeoutlen for visual mode as I don't use WhichKeyVisual
  " This is mostly so my visual gJ mapping doesn't fall back to the default
  autocmd ModeChanged n:[vV\x16]* let &timeoutlen = 3000
  autocmd ModeChanged *:n let &timeoutlen = 500
endif

" Clean, consistent highlighting of tabline, statusline and vertical splits
set fillchars+=vert:\ ,
autocmd VimEnter,ColorScheme *
  \ hi! link VertSplit StatusLineNC |
  \ hi! link Tablinefill StatusLineNC |
  \ hi! link TablineSel StatusLine |
  \ hi! link Tabline StatusLineNC |
  \ hi! link StatusLineTerm StatusLine |
  \ hi! link StatusLineTermNC StatusLineNC

" Only show cursorline in active window, easy to locate active window
" Note: Both Buf{Enter,Leave} and Win{Enter,Leave} required to handle
" various edge cases with popups, same buffer in multiple windows etc.
" Add exception to work alongside hack to auto reveal file in NERDTree
set nocursorline
autocmd WinEnter,BufEnter * setlocal cursorline
autocmd WinLeave,BufLeave * if &filetype != 'nerdtree' | setlocal nocursorline | endif

" use normal rather than hanging indent for multiline ruby assignment, i.e.
" let x = if foo    --NOT--    let x = if foo
"   bar                                  bar
" end                                  end
let g:ruby_indent_assignment_style = 'variable'

" Disable vim-visual-multi mappings, except CTRL-n (see :h vm-find-word)
let g:VM_default_mappings = 0

" Disable indentLine plugin by default, toggle with <leader>pi
let g:indentLine_enabled = 0

" Use same highlighting for indent lines as used for whitespace listchars
let g:indentLine_defaultGroup = 'SpecialKey'

" Disable conceal for json and markdown, indentLine sets conceallevel to 2, so
" enabling it will conceal some characters in filetypes with built in support
" (I find this acceptable, I don't use conceal, I prefer some kind of preview)
let g:vim_json_conceal=0
let g:markdown_syntax_conceal=0

" Tell vim-qf to enable ack.vim style mappings in quickfix window
let g:qf_mapping_ack_style = 1

" Tell vim-qf to use a fixed window size (default 10)
let g:qf_auto_resize = 0

" Tell vim-qf not to mess with loclist positioning (1 qflist, many loclists)
let g:qf_loclist_window_bottom = 0

" Tell QFEnter to skip some filetypes when choosing window to open
" Note: plugin required because vim only reuses normal buffers when opening
" files from quickfix windows, which does not work well with bufexplorer etc.
let g:qfenter_exclude_filetypes = ['nerdtree', 'tagbar', 'scratch']

" Tell QFEnter to move to next usable window rather than simply echo an error
" when attempting to open a file in a window matching an excluded filetype
let g:qfenter_excluded_action = 'next'

" Open WhichKey menu for leader mappings after timeoutlen (500ms)
nnoremap <silent> <leader> :WhichKey '\'<CR>
" And for square bracket mappings from vim-unimpaired and friends
nnoremap <silent> ] :WhichKey ']'<CR>
nnoremap <silent> [ :WhichKey '['<CR>
" Workaround for WhichKey bug affecting unimpaired option mappings
" Writes part of RHS of map to buffer, so hide from WHichKey menu
nnoremap <silent> ]o :WhichKey ''<CR>
nnoremap <silent> [o :WhichKey ''<CR>
" Also trigger WhichKey menu for g prefix mappings, some plugins
nnoremap <silent> g :WhichKey 'g'<CR>

" Add which-key to runtimepath on old vim versions to use which_key#register
" In newer versions autoload searches packpath in addition to runtimepath
if !has("nvim-0.4.0") && !has("patch-8.2.4275")
  packadd which-key
endif

" Define dictionary with prefix names for leader mappings
call which_key#register('\', "g:which_key_map")
let g:which_key_map =  {}
let g:which_key_map.a = { 'name' : '+actions' }
let g:which_key_map.c = { 'name' : '+coc/lsp' }
let g:which_key_map.d = { 'name' : '+debug' }
let g:which_key_map.f = { 'name' : '+fuzzyy' }
let g:which_key_map.g = { 'name' : '+git' }
let g:which_key_map.h = { 'name' : '+hunks' }
let g:which_key_map.j = { 'name' : '+jumpto' }
let g:which_key_map.p = { 'name' : '+plugins' }
let g:which_key_map.t = { 'name' : '+test' }
let g:which_key_map.y = { 'name' : '+options' }
let g:which_key_map.u = { 'name' : '+unicode' }
let g:which_key_map.w = { 'name' : '+windows' }

" Disable caching of WhichKey menus - allow for buffer local mappings
let g:which_key_run_map_on_popup = 1

" Run native command when mapping not defined (required for WhichKey 'g')
let g:which_key_fallback_to_native_key = 1

" don't automatically save session on exit in non-gui vim
let sessionman_save_on_exit=0

" minimalist sessions list, hide mappings help
let sessionman_minimal_ui = 1

" disable rails plugin on vim enter, slow when used with vim-bundler
" also results in some garbage written to screen, seems a vim issue
" see https://github.com/tpope/vim-rails/issues/579 for some info
let g:rails_vim_enter = 0

" disable projectionist on vim enter, also causes garbage to be written
" to screen, also see https://github.com/tpope/vim-rails/issues/579
let g:projectionist_vim_enter = 0

" Don't add the recent files menu from MRU plugin
let MRU_Add_Menu = 0

" Use the current window to load the list of MRU files
let MRU_Use_Current_Window = 1

" Use relative paths when opening files from the MRU list
let MRU_Open_File_Relative = 1

" Don't add git commits, private or tmp files to MRU files
let MRU_Exclude_Files = '\.git\/.*\|^/\(private\|tmp\|var\)/.*\|' . $HOME . '/tmp'

" Don't fuzzy match when filtering MRU files, orders on match score
let MRU_FuzzyMatch = 0

" Tell tagbar to stop enabling ballooneval
let g:tagbar_show_balloon = 0

" Don't auto-generate tags files in every source code repo
let g:gutentags_generate_on_new = 0
let g:gutentags_generate_on_missing = 0

" But do generate when I write a file, for now anyway
" Note: Consider disabling gutentags entirely by default
let g:gutentags_generate_on_write = 1

" Tell netrw to also stop enabling ballooneval
let g:netrw_nobeval = 1

" Show relative paths by default in bufexplorer
let g:bufExplorerShowRelativePath = 1

" Show no name buffers in bufexplorer, I want to be able to find them easily
" Note: BufExplorer lists quickfix and location list buffers as [No Name] if
" it finds them in the buffer list. This is confusing and makes it easy to
" break things, so I'm using the vim-qf plugin to hide them from the list.
" FIXME: this probably warrants forking and fixing BufExplorer to hide them.
let g:bufExplorerShowNoName = 1

" Disable default BufExplorer key mappings (use custom mappings)
let g:bufExplorerDisableDefaultKeyMapping = 1

" Accept/close popup/completion menu with enter/cr, ah sanity, finally
let g:lexima_accept_pum_with_enter = 1

" Stop with the house of pain, no jumping around on CR
let g:AutoPairsCenterLine = 0

" Disable ALE linting by default, use ALEToggle to enable
let g:ale_enabled = 0

" And stop enabling balloneval, even when linting disabled!
let g:ale_set_balloons = 0

" Even when ALE is enabled, disable automatic linting as you type
" Note: linting still runs on enter, save and leave insert mode
let g:ale_lint_on_text_changed = 'never'

" Don't highlight linting errors in source, just use sign column
let g:ale_set_highlights = 0

" Only show linting errors inline for the current line
" Disabled for now as this also prevents multiple errors for the current line
" for being shown (which seems like a bug, but I can't find an ALE bug report)
" Restore this even though it doesn't work for multiple warnings or errors,
" becuase showing suggestsions from tsserver as virtual text is infuriating
let g:ale_virtualtext_cursor = 'current'

" Configure some fixers for ALEFix (easier than ':!eslint --fix %' etc.)
let g:ale_fixers = {
  \ 'javascript': ['eslint'],
  \ 'python': ['autopep8'],
  \ 'ruby': ['rubocop']
  \ }

" Only use ALE to run linters, use coc.nvim with language servers
" Note: Coc.nvim configured to send disgnostics to ALE for display
let g:ale_disable_lsp = 1

" Disable coc.nvim service at startup, use CocStart to enable
let g:coc_start_at_startup = 0

" Disable coc.nvim warnings on old vim versions
let g:coc_disable_startup_warning = 1

" Tell NERDTree to respect wildignore
let NERDTreeRespectWildIgnore = 1

" Stop NERDTree from hijacking netrw, I want to use both :-)
let NERDTreeHijackNetrw = 0

" Show hidden files in NERDTree (same as netrw)
let NERDTreeShowHidden = 1

" Custom statusline for NERDTree (just show buffer name, e.g. NERD_tree_1)
" Another option to consider is to show the currently selected file, e.g.
" https://github.com/vim-airline/vim-airline/issues/271#issuecomment-40597276
let NERDTreeStatusline = '%t'

" Minimalist NERDTree UI, no bookmarks, help hint or up a dir
let NERDTreeMinimalUI = 1

" Always show the netrw banner, so it's not mistaken for NERDTree
let g:netrw_banner = 1

" Don't go back to netrw when choosing to edit the alternate file,
" actually go back to the last edited file (same as bufexplorer)
let g:netrw_altfile = 1

" Disable whitespace highlighting by default, toggle with <leader><space>
let g:better_whitespace_enabled = 0

" Automatically strip whitespace on save using better_whitespace plugin
let g:strip_whitespace_on_save = 1

" Only strip whitespace on modified lines and don't ask for confirmation
let g:strip_only_modified_lines = 1
let g:strip_whitespace_confirm = 0

" When using StripWhitespace command, also include blank lines at eof
let g:strip_whitelines_at_eof = 1

" Don't autohide scratch window when leaving insert mode
let g:scratch_insert_autohide = 0

" Highlight JSX embedded in javascript files
let g:jsx_ext_required = 0

" Disable gitgutter by default, toggle using <leader>pg
let g:gitgutter_enabled = 0

" Enable Vim popup win with git-messenger (currently relies on my fork)
let g:git_messenger_vimpopup_enabled = 1
let g:git_messenger_always_into_popup = 1

" Fuzzyy configuration
let g:fuzzyy_follow_symlinks = 1
let g:fuzzyy_reuse_windows = ['netrw', 'bufexplorer', 'mru']
let g:fuzzyy_ripgrep_options = [
  \ "--no-config",
  \ "--no-ignore-parent",
  \ "--ignore-file " . expand('~/.vim/rgignore')
  \ ]

" For testing - use vim-nerdfont for fuzzyy glyphs if installed
autocmd VimEnter * if exists("g:loaded_nerdfont") |
  \   let g:fuzzyy_devicons_glyph_func = 'nerdfont#find' |
  \ endif

" Same devicon colors in NERDTree, BufExplorer, and Fuzzyy
let g:fuzzyy_devicons_color_table = {
  \ '*.coffee': 'chocolate',
  \ '*.exs': 'mediumpurple',
  \ '*.hs': 'mediumpurple',
  \ '*.jl': 'mediumpurple',
  \ '*.pl': 'teal'
  \ }
hi link NERDTreeFlags Normal
function! ApplyFuzzyyColors()
  let directories = ['', '', '', '', '', '']
  call matchadd('Directory', printf('\%%(%s\)', join(directories, '\|')))
  call fuzzyy#utils#devicons#AddColor(win_getid())
endfunction
autocmd FileType nerdtree,bufexplorer call ApplyFuzzyyColors()

" Update devicon glyphs for nerd fonts v3
" See https://github.com/ryanoasis/vim-devicons/issues/452
" And https://github.com/ryanoasis/vim-devicons/pull/454
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['tex']    = '󰙧'  " nf-md-stop_circle_outline
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['cs']     = '󰌛'  " nf-md-language_csharp
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['r']      = '󰟔'  " nf-md-language_r
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rproj']  = '󰗆'  " nf-md-vector_rectangle
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['sol']    = '󰡪'  " nf-md-ethereum
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['pem']    = '󰌋'  " nf-md-key_variant
" And add kotlin as supported glyph as missing from vim-devicons
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['kt'] = '󱈙' " nf-md-language_kotlin

" Prefix fzf commands with FZF, e.g. Files becomes FZFFiles (avoids polluting
" top level namespace and makes it easier to find and complete FZF commands)
" Only using this for testing now, I've switch to Fuzzyy as my default finder
let g:fzf_command_prefix = 'FZF'

" Leaderf configuration
" Only using this for testing now, I've switch to Fuzzyy as my default finder
" Disable default <leader>f mapping
let g:Lf_ShortcutF = ''
" Add LeaderfGrep command to perform live grep
command! LeaderfGrep :silent exe 'Leaderf rg --live'
" Use up/down rather than CTRL-K/J to browse results
let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}
" Open in popup by default
let g:Lf_WindowPosition = 'popup'
" Would like to disable status line, but doesn't work with popup window,
" causes vim.error E121: Undefined variable: g:Lf_File_StlResultsCount
" let g:Lf_DisableStl = 1
" Don't bother with devicons, I'm happy with lean and mean
let g:Lf_ShowDevIcons = 0
" Would like to flip the order of the results, more like FZF.vim or
" telescope.nvim, but this currently has no effect with popup windows
let g:Lf_ReverseOrder = 1
" Don't shrink the results window when filtering
let g:Lf_PopupAutoAdjustHeight = 0
let g:Lf_RgConfig = [
  \ "--no-config",
  \ "--smart-case",
  \ "--max-columns=1000",
  \ "--hidden",
  \ "--no-ignore-parent",
  \ "--ignore-file ~/.vim/rgignore"
  \ ]
" Note: each dir entry matches anywhere in the file path as the pattern passed
" to Python fnmatch() wraps the dir entry in wildcards, i.e. "*/" + dir + "/*"
let g:Lf_MruWildIgnore = {
  \ 'dir': ['.git', 'tmp', 'private'],
  \ 'file': []
  \}

" Don't automatically change working directory to project root
" Just using public function FindRootDirectory() with MRU mappings
let g:rooter_manual_only = 1

" Use built in terminal to run tests using vim-test
let g:test#strategy = 'vimterminal'

" Workaround for monorepo with multiple packages, finds nearest package.json
" Use lambda as FindRootDirectory() not defined until vim-rooter plugin loaded
" Note: this still assumes node_modules/.bin/jest can be found relative to cwd
let test#project_root = { -> FindRootDirectory() }

" Override indent level for continuation lines in vimscript
" Default is shiftwidth() * 3, see $VIMRUNTIME/ftplugin/vim.vim
let g:vim_indent_cont = 2

" Don't automatically use sleuth to detect indent etc., conflicts with some file
" navigation plugins, sleuth uses :redir, which cannot be used inside execute()
" Instead add a BufReadPost autocmd to run Sleuth if EditorConfig not applied
let g:sleuth_automatic = 0

" Additional VS code style mappings for VimSpector, not using huamn mode as
" it adds leader mappings, and I already have some with <leader>d prefix
let g:vimspector_enable_mappings = 'VISUAL_STUDIO'

" Disable default splitjoin mappings, avoid fallback to built-in gJ
let g:splitjoin_join_mapping = ''
let g:splitjoin_split_mapping = ''

" Use an EditorConfig hook to set b:editorconfig, kinda like Neovim
" Allows other autocmds to check what has been applied by EditorConfig
function! <SID>EditorConfigHook(config)
  let b:editorconfig = a:config
endfunction
call editorconfig#AddNewHook(function('<SID>EditorConfigHook'))

" Only use Sleuth as fallback to detect indent when EditorConfig not applied
autocmd BufReadPost *
    \ if !exists('b:editorconfig') || (type(b:editorconfig) == 4 && b:editorconfig->get('indent_size', 'unset') ==# 'unset') |
    \   exe ':silent! Sleuth' |
    \ endif

" Disable better whitespace plugin when configured via EditorConfig
autocmd BufReadPost *
    \ if exists('b:editorconfig') && type(b:editorconfig) == 4 && b:editorconfig->get('trim_trailing_whitespace', 'unset') !=# 'unset' |
    \   exe 'DisableStripWhitespaceOnSave' |
    \ endif
augroup END

if executable('mdcat')
  " Mapping to load markdown preview in popup window
  command! MarkdownPreview :silent execute 'FloatermNew --disposable --title='. expand('%:~:.') . ' mdcat -p %'
  autocmd FileType markdown
    \ nnoremap <buffer> <leader>v :MarkdownPreview<CR>
else
  " FIXME should this error only appear when attempting to preview markdown???
  echoerr "WARNING: no markdown preview executable found, install mdcat to fix this, see https://github.com/swsnr/mdcat"
endif

if executable('rg')
  exe 'set grepprg=rg\ --vimgrep\ ' . substitute(join(g:Lf_RgConfig, ' '), ' ', '\\ ', 'g')
  set grepformat=%f:%l:%c:%m
else
  echoerr "WARNING: grep alternative not found, finding in files will be slow, install ripgrep to fix this, see https://github.com/BurntSushi/ripgrep"
endif

if !executable('fd')
  " Note: Leaderf and Fuzzyy will use fd if installed, but don't warn if not
  echoerr "WARNING: find alternative not found, fuzzy finding files will be slow, install fd to fix this, see https://github.com/sharkdp/fd"
endif

" Tweak some highilghting from colour schemes
autocmd VimEnter,ColorScheme *
  \ hi clear CocUnusedHighlight |
  \ hi! link CocUnusedHighlight CocHintHighlight |
  \ hi clear QuickFixLine |
  \ hi QuickFixLine ctermfg=red guifg=red |
  \ if get(g:, 'colors_name', v:null) ==# 'onedark' |
  \   hi Visual ctermbg=64 |
  \   hi Comment ctermfg=243 |
  \   hi SpecialComment ctermfg=243 |
  \   hi StatusLine ctermbg=242 |
  \   hi StatusLineNC ctermbg=237 |
  \   hi Search ctermfg=235 ctermbg=108 |
  \   hi IncSearch ctermfg=235 ctermbg=215 |
  \   hi! link CurSearch IncSearch |
  \ elseif get(g:, 'colors_name', v:null) ==# 'PaperColor' |
  \   hi Spellbad guibg=NONE guifg=NONE |
  \ endif

" Add cut/move mappings (delete operations overridden by vim-cutlass to just
" delete, not yank and delete, see https://github.com/svermeulen/vim-cutlass)
" Warning: breaks "m{a-zA-Z}" command to set named marks, and "M" to move to
" the middle of screen. Use alternate mappings gm and Z for these instead.
nnoremap gm m
nnoremap Z M
nnoremap m d
xnoremap m d
nnoremap mm dd
nnoremap M D

" Use q to close the quickfix window and return to the previous window
autocmd FileType qf nnoremap <silent> <buffer> q :wincmd p<CR>:cclose<CR>:wincmd =<CR>

" Fix previous window navigation when existing quickfix window re-used
autocmd QuickFixCmdPre * if &ft == 'qf' | wincmd p | end

" Mark previous cursor position when entering visual mode, this abuses the
" first character of previously changed text mark to allow for deletion from
" visual mode, otherise we might jump to a position where text was deleted.
" For consistency, also set the mark for the end of changed text, see :h `[
" And set the last known cursor pos mark to detect deletion of text, see :h ``
nnoremap v m`m[m]v
nnoremap V m`m[m]V
nnoremap <C-v> m`m[m]<C-v>
nnoremap <2-LeftMouse> m`m[m]<2-LeftMouse>
nnoremap <LeftDrag> m`m[m]<LeftDrag>

" And return to previous cursor position when leaving visual mode
" ModeChanged pattern derived from https://github.com/vim/vim/commit/25def2c8
" After deletion in visual line mode, jump to the first non-blank character,
" consistent with the default behaviour without these mappings and autocmds
if exists('##ModeChanged')
  autocmd ModeChanged [vV\x16]*:n
    \ if ( getpos("'`") != getpos("'[") ) && ( v:event['old_mode'] ==# 'V' ) |
    \   exe "normal! '[" |
    \ else |
    \   exe "normal! `[" |
    \ endif
endif

" Readable splitjoin mappings with no fallback to built in gJ
nmap gJ <plug>SplitjoinJoin
nmap gS <plug>SplitjoinSplit

" Quickly remove indent in visual mode
vmap 0 99<<

" Remap visual gJ to remove indent when joining lines
function! VisualJoinRemoveIndent()
  normal! gv99<<
  normal! gvgJ
  normal! gv=
endfunction
vnoremap gJ :<C-u>call VisualJoinRemoveIndent()<CR>

" Move block selections around in visual mode with schlepp plugin
vmap <C-Up> <Plug>SchleppUp
vmap <C-Down> <Plug>SchleppDown
vmap <C-Left> <Plug>SchleppLeft
vmap <C-Right> <Plug>SchleppRight

" Calculate sum, avg, min, and max of visual selection using vmath plugin
vmap <expr> ++ VMATH_YankAndAnalyse()

" Tab navigation with Ctrl-Tab (only works in gui vim)
noremap <C-Tab> :tabnext<cr>
noremap <S-C-Tab> :tabprevious<cr>

" Open vim alternate file, i.e. previously edited file in window
nnoremap <Leader># :edit#<CR>

" Additional mapping for quick switching between alternate files
nnoremap <Leader><leader> <C-^>

" Search with nomagic, almost like fgrep/grep --fixed-strings, see :h nomagic
nnoremap <leader>/ /\V

" Convenient mapping to open command history
command! CmdHistory call feedkeys(":\<C-F>")
nnoremap <silent> <leader>: :CmdHistory<CR>

" CoC aware mapping to accept completion with CR. Necessary because some
" plugins wrap CR mappings, so CoC does not detect an existing CR mapping to
" accept completion as it cannnot see pumvislble() in the existing map expr.
if match(execute('imap <CR>'), 'FriendlyCR') != -1
  inoremap <silent><expr> <CR> exists('*coc#pum#visible') && coc#pum#visible()
    \ ? coc#pum#confirm() : ( pumvisible() ? '<C-y>' : '<C-]><C-R>=FriendlyCR()<CR>' )
endif

" Custom function to show correct CoC status in statusline
" coc#status() returns last status even after service stopped
function! CocStatus()
  if coc#rpc#ready()
    return coc#status()
  endif
  return ''
endfunction
autocmd User CocStatusChange redrawstatus

" Toggle git gutter, diff markers in sign column etc.
nnoremap <leader>pg :GitGutterToggle<CR>

" Highlight whitespace
nnoremap <leader>pw :ToggleWhitespace<CR>

" Toggle colorizing of color codes and names
nnoremap <leader>pC :ColorToggle<CR>

" Toggle indent guides / lines
nnoremap <leader>pl :IndentLinesToggle<CR>

" Toggle ALE linting (disabled by default)
function! ToggleALE()
  if g:ale_enabled
    ALEDisable
    echohl MoreMsg | echom 'ALE disabled' | echohl None
  else
    ALEEnable
    echohl MoreMsg | echom 'ALE enabled' | echohl None
  endif
endfunction
command! ToggleALE call ToggleALE()
nnoremap <silent><leader>pa :ToggleALE<CR>

" Toggle coc.nvim service (disabled by default)
function! ToggleCoC()
  if coc#rpc#ready()
    echohl MoreMsg | echom 'stopping coc.nvim service' | echohl None
    call coc#rpc#stop()
  else
    echohl MoreMsg | echom 'starting coc.nvim service' | echohl None
    call coc#rpc#start_server()
  endif
endfunction
command! ToggleCoC call ToggleCoC()
nnoremap <silent><leader>pc :ToggleCoC<CR>

" Toggle quickfix list
function! ToggleQuickfixList()
  if get(getqflist({'winid': 1}), 'winid') != 0
    cclose
  elseif getqflist() != []
    copen
  else
    echohl ErrorMsg
    echo "Quickfix List is empty."
    echohl None
  endif
endfunction
command! ToggleQuickfixList call ToggleQuickfixList()
nnoremap <silent><leader>q :ToggleQuickfixList<CR>

" Toggle location list
function! ToggleLocationList()
  if get(getloclist(winnr(), {'winid': 1}), 'winid') != 0
    lclose
  elseif getloclist(winnr()) != []
    lopen
  else
    echohl ErrorMsg
    echo "Location List is empty."
    echohl None
  endif
endfunction
command! ToggleLocationList call ToggleLocationList()
nnoremap <silent><leader>l :ToggleLocationList<CR>

" Toggle project drawer / tree view, but unlike NERDTreeToggle
" command, locate the current file in the tree when opening
function! ToggleNERDTree()
  if g:NERDTree.IsOpen()
    NERDTreeClose
  elseif filereadable(expand('%'))
    NERDTreeFind
    exe "norm! zz"
  else
    NERDTreeFocus
  endif
endfunction
command! ToggleNERDTree call ToggleNERDTree()
nnoremap <silent><leader>e :ToggleNERDTree<CR>

" Toggle terminal - for default shell only, other terms ignored
function! TerminalToggle()
  let termbufs = filter(term_list(), { _, bufnr -> stridx(bufname(bufnr), $SHELL) > 0 })
  if empty(termbufs)
    call Terminal()
  else
    let termwins = filter(map(copy(termbufs), { _, bufnr -> bufwinnr(bufnr) }), 'v:val != -1')
    if empty(termwins)
      for bufnr in termbufs | exe 'sbuffer ' . bufnr | endfor
    else
      for winnr in reverse(sort(termwins)) | exe winnr . 'wincmd c' | endfor
    endif
  endif
endfunction
nnoremap <C-W>` :call TerminalToggle()<CR>
tnoremap <C-W>` <C-W>:call TerminalToggle()<CR>

" Open terminal in directory of current file
function! Terminal()
  if getcwd() ==# expand('%:p:h')
    terminal
  else
    let $OLDPWD = getcwd()
    split | silent lcd %:p:h | terminal ++curwin
    echohl WarningMsg
    echo "Terminal started relative to current file, cd - returns to cwd"
    echohl None
    call timer_start(3000, { -> execute("echo ''", "") })
  endif
endfunction
command Terminal call Terminal()
nnoremap <silent><leader>` :Terminal<CR>

" Custom terminal statusline, not a normal editor window
if exists('##TerminalWinOpen')
  autocmd TerminalWinOpen * setlocal statusline=%f
endif

" Use K to show documentation from CoC in preview window.
function! ShowDocumentation()
  if coc#rpc#ready() && CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction
nnoremap <silent> K :call ShowDocumentation()<CR>

" Additional window mappings
" Minimal vimrc includes CTRL + arrow key mappings
" open vim defined alternate file in new vertial split
nnoremap <leader>w# :vsplit#<CR>
" open plugin defined alternate file in new vertial split
nnoremap <leader>wa :AV<CR>
" horizontal and vertical splits
nnoremap <leader>ws :wincmd s<CR>
nnoremap <leader>wv :wincmd v<CR>
" rotate and exchange windows
nnoremap <leader>wr :wincmd r<CR>
nnoremap <leader>wx :wincmd x<CR>
" move current window to top
nnoremap <leader>w<Up> :wincmd K<CR>
" move current window to bottom
nnoremap <leader>w<Down> :wincmd J<CR>
" move current window to far left
nnoremap <leader>w<Left> :wincmd H<CR>
" move current window to far right
nnoremap <leader>w<Right> :wincmd L<CR>
" shortcuts for common commands
nnoremap <leader>= :wincmd =<CR>
nnoremap <leader>_ :wincmd _<CR>
nnoremap <leader>\| :wincmd \|<CR>
nnoremap <leader>] :wincmd L<CR>
" increase/decrease window width
nnoremap <leader>> :10wincmd ><CR>
nnoremap <leader>< :10wincmd <<CR>

" indentation text objects, visual, select, and operator-pending modes
let g:vindent_object_XX_ii = 'ii' " inner indent level, including blank lines
let g:vindent_object_OX_ii = 'iI' " inner indent level, excluding blank lines
let g:vindent_object_XX_ai = 'ai' " an indent level and the line above
let g:vindent_object_XX_aI = 'aI' " an indent level and the lines above/below

" make vindent motion count as a jump (works with jumplist)
let g:vindent_jumps = 1

" some recommended vindent motions, taken from vindent readme
let g:vindent_motion_OO_prev   = '[=' " jump to prev block of same indent.
let g:vindent_motion_OO_next   = ']=' " jump to next block of same indent.
let g:vindent_motion_more_prev = '[+' " jump to prev line with more indent.
let g:vindent_motion_more_next = ']+' " jump to next line with more indent.
let g:vindent_motion_less_prev = '[-' " jump to prev line with less indent.
let g:vindent_motion_less_next = ']-' " jump to next line with less indent.

" Tag navigation
" remap CTRL-] to show list when multiple matches, see :h g_CTRL-]
nnoremap <C-]> g<C-]>
" use g] jump to tag in next window (and split if necessary)
function! TJumpNextWin()
  let currword = expand("<cword>")
  let startwin = winnr()
  " Move to next window with a normal buffer
  let c = 0
  let n = winnr('$')
  while c < n
    exec 'wincmd w'
    if empty(getbufvar(+expand("<abuf>"), "&buftype"))
      break
    endif
    let c = c + 1
  endwhile
  " Back where we started? Open a new split
  if winnr() == startwin
    exec 'wincmd v'
  endif
  try
    exec "tjump ".currword
  catch
    " Go back to startwin on error
    exec startwin . "wincmd w"
    echoerr v:exception
  endtry
endfunction
command! TJumpNextWin call TJumpNextWin()
nnoremap g] :TJumpNextWin<CR>

" I think I needed to set this for VimspectorInstall to work properly
" FIXME: investigate why this was necessary, docs suggest it should not be
let g:vimspector_base_dir = expand('~/.vim/pack/bundle/start/vimspector')

" Launch graphical debugger/inspector (vimspector)
nmap <Leader>dl <Plug>VimspectorLaunch
nmap <leader>db <Plug>VimspectorBreakpoints
nmap <leader>dd <Plug>VimspectorToggleBreakpoint
nmap <leader>dh :help vimspector-visual-studio-vscode<CR>
nmap ]` <Plug>VimspectorJumpToNextBreakpoint
nmap [` <Plug>VimspectorJumpToPreviousBreakpoint

nmap <leader>tn :TestNearest<CR>
nmap <leader>tf :TestFile<CR>
nmap <leader>ta :TestSuite<CR>
nmap <leader>tl :TestLast<CR>
nmap <leader>tv :TestVisit<CR>

" Unicode mappings (use <C-X><C-Z> for ins-completion of unicode chars)
" Search for specific digraph char
nnoremap <leader>ud :Digraphs<SPACE>
" Search for specific Unicode char
nnoremap <leader>us :UnicodeSearch<SPACE>
" Search for specific Unicode char (and insert at current cursor position)
nnoremap <leader>ui :UnicodeSearch!<SPACE>
" Identify character under cursor (like ga command)
nnoremap <leader>un :UnicodeName<CR>
" Print Unicode Table in new window
nnoremap <leader>ut :UnicodeTable<CR>
nnoremap <leader>uh :help unicode-commands<CR>

" Toggle options, <leader>y inspired by vim-unimpaired (y kinda like a switch)
nnoremap <leader>yc :setlocal cursorcolumn!<CR>
nnoremap <leader>yl :setlocal list!<CR>
nnoremap <leader>yn :setlocal number!<CR>
nnoremap <leader>yr :setlocal relativenumber!<CR>
nnoremap <leader>ys :setlocal spell!<CR>
nnoremap <leader>yw :setlocal wrap!<CR>

" Additional Fuzzyy commands and mappings
command! -nargs=? FuzzyFilesAll call fuzzyy#files#Start({'cwd': fuzzyy#utils#selector#GetRootDir(), 'command': 'rg -uu --files'})
nnoremap <leader>fa :FuzzyFilesAll<CR>
nnoremap <leader>fF :FuzzyFilesRoot<CR>
nnoremap <leader>fG :FuzzyGrepRoot<CR>
nnoremap <leader>fR :FuzzyMruRoot<CR>
nnoremap <leader>ft :FuzzyTags<CR>
nnoremap <leader>fT :FuzzyTagsRoot<CR>
" FuzzyGrep current word
nnoremap <leader>fw :FuzzyGrep <C-R><C-W><CR>

" git/fugitive mappings
nmap <leader>gb :Git blame<CR>
nmap <leader>gd :Git diff %<CR>
nmap <leader>gD :Git diff<CR>
nmap <leader>gg :Git<CR>
nmap <leader>gl :Git log --oneline --follow %<CR>
nmap <leader>gL :Git log --oneline<CR>
nmap <leader>gs :Git status<CR>
nmap <leader>gv :Gvdiffsplit<CR>

" GitGutter normally conflicts with vim comment plugin (or the reverse)
" Both use ic and ac mappings for text objects, so use h with GitGutter
if maparg('[c', 'n') =~# 'GitGutter'
  nunmap [c
  nunmap ]c
endif
nmap [h <Plug>(GitGutterPrevHunk)
nmap ]h <Plug>(GitGutterNextHunk)
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

" coc.nvim lsp code action mappings
nmap <leader>aa <Plug>(coc-codeaction)
nmap <leader>ac <Plug>(coc-codeaction-cursor)
nmap <leader>af :ALEFix<CR>
nmap <leader>al <Plug>(coc-codeaction-line)
nmap <leader>ar <Plug>(coc-codeaction-refactor)
nmap <leader>as <Plug>(coc-codeaction-source)
vmap <leader>ar <Plug>(coc-codeaction-refactor-selected)

" coc.nvim specific feature mappings
nmap <leader>cd :CocList diagnostics<CR>
nmap <leader>cf <Plug>(coc-fix-current)
nmap <leader>cl :CocList lists<CR>
nmap <leader>co :CocOutline<CR>
nmap <leader>cq <Plug>(coc-format)
nmap <leader>cr <Plug>(coc-refactor)
nmap <leader>crn <Plug>(coc-rename)
nmap <leader>cs :CocList -I symbols<CR>
vmap <leader>cq <Plug>(coc-format-selected)

" coc.nvim lsp jump/goto navigation mappings
" gd, gD, etc. not mapped because coc.nvim not always enabled
nmap <leader>jd <Plug>(coc-definition)
nmap <leader>jD <Plug>(coc-declaration)
nmap <leader>jt <Plug>(coc-type-definition)
nmap <leader>ji <Plug>(coc-implementation)
nmap <leader>jr <Plug>(coc-references)
nmap <leader>ju <Plug>(coc-references-used)

" diagnostics navigation mappings
nmap [d <Plug>(coc-diagnostic-prev)
nmap ]d <Plug>(coc-diagnostic-next)
nmap <silent> [a :ALEPreviousWrap<CR>
nmap <silent> ]a :ALENextWrap<CR>
nmap <silent> [A :ALEFirst<CR>
nmap <silent> ]A :ALELast<CR>

" Custom grep prompt, inspired by vim-grepper, but simpler, just runs grepprg
" silently to avoid the "Press ENTER to continue" prompt after running external
" commands and escapes cmdline special chars to avoid expansion of # and friends
function! GrepPrompt(...)
  let inputstr = trim(input('grep> ', (a:0 > 0 ? a:1 : ''), 'customlist,GrepComplete'))
  if empty(inputstr) | redraw! | return | end
  try
    exec 'silent grep! '. escape(inputstr, '#%')
  catch /E40:/ " shell error, re-run unsilent to see error output
    try
      exec 'unsilent grep! '. escape(inputstr, '#%')
    catch /E40:/
      call setqflist([], 'r', {'title': &grepprg . ' ' . inputstr, 'items': []})
    endtry
  endtry
  redraw! | copen
endfunction

" Simple completion for grep prompt, also inspired by vim-grepper
function! GrepComplete(lead, _line, _pos)
  let args = split(a:lead, '.*\s\zs', 1)
  if len(args) < 2 | return [] | end
  let path = args[-1]
  let head = join(args[0:-2])
  return map(getcompletion(args[-1], 'file'), 'head . fnameescape(v:val)')
endfun

" Search in files using grep program, see :help grepprg and :help grep
command! GrepPrompt call GrepPrompt()
nnoremap <leader>s :GrepPrompt<CR>

" List projects, only used in GUI vim, see gvimrc
if has('gui_running')
  nnoremap <leader>p :SessionSave<CR>:SessionList<CR>
endif

" List open files/buffers
nnoremap <leader>b :ToggleBufExplorer<CR>

" List most recently used files
nnoremap <leader>m :MRUToggle<CR>

" Most recently used files within current working directory
command! MRUCwd execute 'MRU ' . getcwd()
nnoremap <leader>r :MRUCwd<CR>
" And most recently used files within project root directory
command! MRURoot execute 'MRU ' . FindRootDirectory()
nnoremap <leader>R :MRURoot<CR>

" Outline view of current file
nnoremap <leader>o :TagbarToggle<CR>

" Expand/maximize current window
" See https://stackoverflow.com/a/26551079/17278003
function! ExpandWin() abort
  if winnr('$') == 1 | return | endif
  if exists('w:expanded') && w:expanded
    execute w:expand_winrestcmd
    let w:expanded = 0
  else
    let w:expand_winrestcmd = winrestcmd()
    resize
    vertical resize
    let w:expanded = 1
  endif
endfunction
autocmd WinLeave * if exists('w:expanded') && w:expanded | call ExpandWin() | endif
command! ExpandWin call ExpandWin()
nnoremap <Leader>x :ExpandWin<CR>

" Remap gs to open Scratch window in normal rather than insert mode
let g:scratch_no_mappings = 1 " must disable plugin mappings first
nnoremap gs :Scratch<CR>

if exists('##TerminalWinOpen')
  " Make p paste from unanmed register in terminal normal mode
  au TerminalWinOpen *
    \ nnoremap <silent> <buffer> p :call term_sendkeys('', getreg()) \| normal! A<CR>
endif

" Workaround for vim-vinegar not working with g:netrw_altfile = 1
" See https://github.com/tpope/vim-vinegar/issues/137
nnoremap - :Explore<CR>:silent! call search('^' . expand('#:t'), 'wc')<CR>

" Custom filetype detection, runs after built in filetype detection
" Using augroup filetypedetect means this re-runs on :filetype detect,
" which means it works after restoring a macvim session (see gvimrc).
augroup filetypedetect
  " Set .asc to AsciiDoc as this is recognised by GitHub (Vim only recognises
  " .asciidoc and .adoc extensions by default, see $VIMRUNTIME/filetype.vim)
  " Regex allows for armoured ascii PGP public key files with .asc extension
  " AGS script files also use .asc extension, but checking for this is more
  " complicated and vim doesn't recognise the filetype, so ignoring for now.
  autocmd BufRead,BufNewFile *.asc
    \ if getline(1) !~# '^-----BEGIN/' |
    \   setfiletype asciidoc |
    \ endif

  " Additional ruby syntax highlighting
  autocmd BufRead,BufNewFile {Berksfile,Brewfile,Capfile,Thorfile,.pryrc,pryrc,*.cap,*.thor}
    \ setfiletype ruby |

  " Set cloudformation filetypes to enable linting in ALE
  autocmd Filetype yaml,json
    \ let lines = getline(1, min([line("$"), 10])) |
    \ if match(lines, 'AWSTemplateFormatVersion') != -1 |
    \   let &ft=&ft . '.cloudformation' |
    \ endif

  " Set conf.local filetype to conf
  autocmd BufRead,BufNewFile *.conf.local setfiletype conf
augroup END

" Set dict as keywordprg for text, markdown etc. if installed, but load dict
" program output in preview window rather than simply run an external command
if executable("dict")
  function! <SID>Dict(word)
    silent! exe "noautocmd pedit dict \\\"" . a:word . "\\\""
    noautocmd wincmd P
    setlocal modifiable
    setlocal buftype=nofile
    setlocal nobuflisted
    setlocal nofoldenable
    setlocal statusline=%f
    setlocal keywordprg=:Dict
    nnoremap <buffer><silent> q :bw!<CR>

    silent! exe "noautocmd r! dict \"" . a:word . "\""
    silent! exe "1d_"
    silent! exe "gg"
    setlocal nomodifiable
  endfunction
  command! -nargs=1 Dict :call <SID>Dict(<q-args>)
  autocmd FileType text,markdown,gitcommit,hgcommit,asciidoc,rst,rdoc
    \ setlocal keywordprg=:Dict
endif

" Use html omnicompletion for xhtml documents
autocmd FileType xhtml set omnifunc=htmlcomplete#CompleteTags

" Use xmllint as exernal program for formatting xml
autocmd FileType xml setlocal formatprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

" Use jsonlint as external program for formatting json
autocmd FileType json setlocal formatprg=jsonlint\ --pretty-print\ 2>/dev/null

" Use js-beautify as external program for formatting javascript
autocmd FileType javascript set formatprg=js-beautify\ -\ 2>/dev/null

" Use auopep8 for formatting python, customise using ~/.config/pycodestyle
" TODO: automatically use black formatter if configured in pyproject.toml,
" and consider passing textwidth as max line length (changed by editorconfig)
autocmd FileType python setlocal formatprg=autopep8\ -\ 2>/dev/null

" Use syntax based completion when no omnicompletion available
if exists("+omnifunc")
  autocmd Filetype *
    \	if &omnifunc == "" |
    \	  setlocal omnifunc=syntaxcomplete#Complete |
    \	endif
endif

" Experimental: Automatically reveal current file in NERDTree
autocmd WinEnter,BufEnter *
  \ if empty(&buftype) && g:NERDTree.IsOpen()
  \ && filereadable(expand('%')) && stridx(fnamemodify(expand('%'), ':p'), getcwd()) == 0 |
  \   noautocmd NERDTreeFind | exe "norm! zz" | noautocmd wincmd p |
  \ end

" Highlight long lines in active window rather than display colorcolumn
function! <SID>HighlightLongLines()
  if exists('w:long_lines_mid')
    silent! call matchdelete(w:long_lines_mid)
  endif
  if empty(&buftype) && &textwidth > 0
    let w:long_lines_mid = matchadd('ColorColumn', '\%'.(&tw+1).'v.\+', -1)
  endif
endfunction
autocmd WinEnter,BufEnter * call <SID>HighlightLongLines()
autocmd WinLeave,BufLeave * silent! call matchdelete(w:long_lines_mid)
if exists('##OptionSet')
  autocmd OptionSet textwidth call <SID>HighlightLongLines()
endif

" Set working directory when opening vim, use directory of current file when
" provided as argument, otherwise cwd to root of project/package if possible.
" Note: uses vim-rooter, and works nicely with monorepos (not reliant on VCS)
function! <SID>SetWorkingDir()
  let $OLDPWD = getcwd()
  if argc() == 1 && len(argv()) == 1
    if isdirectory(argv(0))
      exec 'cd' argv(0)
    elseif filereadable(argv(0))
      exec 'cd %:p:h'
    end
  elseif len(argv()) == 0 && stridx(getcwd(), $HOME) == 0
    let l:root = FindRootDirectory()
    if !empty(l:root) && l:root !=# getcwd()
      exec 'cd' l:root
    endif
  endif
  if $OLDPWD !=# getcwd()
    echohl WarningMsg
    echo "vimrc: cwd changed to '" . getcwd() . "', :cd - returns to '" . $OLDPWD . "'"
    echohl None
  endif
endfunction
autocmd VimEnter * call <SID>SetWorkingDir()
