call pathogen#infect()

set nocompatible                  " Disable vi compatibility (must come first)

set encoding=utf-8                " Force utf8
set nobomb                        " but don't bother with a BOM

set nomodeline                    " No modelines (potential for security issues)

set cursorline                    " Highlight the cursor line

set ttyfast                       " Assume a fast terminal connection

runtime macros/matchit.vim        " Load the matchit plugin

syntax enable                     " Turn on syntax highlighting
filetype plugin indent on         " Turn on file type detection and indentation

set autoindent                    " Auto-indent if no file type specific indent

set expandtab ts=2 sts=2 sw=2     " Default to two-space indent, no tabs

set showcmd                       " Show incomplete commands as you type
set showmode                      " Show mode when insert, replace or visual

set backspace=indent,eol,start    " Intuitive backspacing

set hidden                        " Allow hidden buffers with unsaved changes

set wildmenu                      " Enhanced command line completion
set wildmode=list:longest         " Complete files like a shell

set ignorecase                    " Ignore case when searching
set smartcase                     " Except when search contains capital letters
if exists("&tagcase")
  set tagcase=followscs           " Update tag search to to the same
endif
set infercase                     " And infer case when doing keyword completion

if exists("&fileignorecase")
  set nofileignorecase            " Make file name completion case-sensitive
endif

set number                        " Show line numbers in left margin
set ruler                         " Show cursor position in default status line

set incsearch                     " Highlight search match as you type
set nohlsearch                    " But clear highlighting once search completed

set nowrap                        " Turn off line wrapping by default
set scrolloff=3                   " Show 3 lines of context around the cursor

set title                         " Set the terminal's title

set visualbell                    " No beeping

set confirm                       " Allow dialog to confirm an action
set autoread                      " Skip confirm for file changed outside vim
set writeany                      " Allow writing of any file without confirm

set writebackup                   " Create backups before overwriting files
set nobackup                      " But don't retain backups after writing
set directory=$HOME/.vim/tmp//    " Keep swap files in one location
set backupdir=$HOME/.vim/tmp//    " And backups in the same place

set laststatus=2                  " Show the status line all the time

set splitright                    " Open vertical splits to the right
set splitbelow                    " Open horizontal splits below

set t_Co=256                      " Assume a 256 color terminal

set background=dark               " Use dark background in terminal vim
if $SSH_CLIENT == ""
   \ && $SUDO_USER == ""
  colorscheme solarized           " With solarized colour scheme locally
else
  colorscheme jellybeans          " And jellybeans when running remotely
endif

if has('balloon_eval')
  set noballooneval               " Disable slow and annoying tooltips
endif

if exists("&synmaxcol")
  set synmaxcol=200               " Disable syntax highlighting on very long lines
endif

set nofoldenable                  " Open all folds by default
set foldlevel=1                   " Fold only one level deep by default
set foldlevelstart=1              " Reset the fold level when opening new files

" Suffixes that can be ignored when completing file names
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" Patterns that should be ignored when expanding wildcards
set wildignore=*~,*.o,*.log,*.aux,*.dvi,*.pdf,*.gif,*.jpg,*.png,*.pyc,.DS_Store,*.egg*,.git,__pycache__

" Custom status line, show relative file path and file type
set statusline=%<%.99f\ %h%w%m%r\ %=\ %{&ft}\ %l\:\%-c\ %P

" store tabs, windows, buffers etc. in sessions
set sessionoptions=blank,buffers,curdir,tabpages,winsize,winpos,resize

" save globals with viminfo - sessionman stores last session info in global
set viminfo='100,<50,s10,h,!

" set list mode characters used to display whitespace
set listchars=tab:→·,trail:·,eol:¶

" Ins mode completion options - complete without menu if just one match,
" only complete to longest common match, don't use preview scratch window
set completeopt=menuone,longest

" don't automatically save session on exit in non-gui vim
let sessionman_save_on_exit=0

" show private gists when listing mine
let g:gist_show_privates = 1

" Don't add the recent files menu from MRU plugin
let MRU_Add_Menu = 0

" Use the current window to load the list of MRU files
let MRU_Use_Current_Window = 1

" Make sure tagbar uses exuberant ctags
if filereadable('/usr/local/bin/ctags')
  let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
endif

" Workaround for tagbar setting ballooneval globally on open/toggle
if has('balloon_eval')
  autocmd WinEnter __Tagbar__* set ballooneval
  autocmd WinLeave __Tagbar__* set noballooneval
endif

" Tell netrw to also stop enabling ballooneval
let g:netrw_nobeval = 1

" Show relative paths by default in bufexplorer
let g:bufExplorerShowRelativePath = 1

" Show no name buffers by default in bufexplorer
let g:bufExplorerShowNoName = 1

" Disable default BufExplorer key mappings (use custom mappings)
let g:bufExplorerDisableDefaultKeyMapping = 1

" Let supertab guess the completion type from current context
let g:SuperTabDefaultCompletionType = "context"

" Use keyword completion if the context can't be determined
let g:SuperTabContextDefaultCompletionType = "<c-n>"

" Always try to match case for supertab completions
let g:SuperTabCompleteCase = 'match'

" Reset supertab completion type once a completion has been chosen
let g:SuperTabRetainCompletionDuration = 'completion'

" Fall back to keyword completion when omni completion fails
autocmd FileType *
  \ if &omnifunc != '' |
  \   call SuperTabChain(&omnifunc, "<c-n>") |
  \ endif

" Use opening and closing tags to trigger html omnicompletion
autocmd FileType html,xhtml
  \ let b:SuperTabContextTextMemberPatterns = ['<', '</']

" Don't automagically colorize text, use <leader>tc to toggle
let g:colorizer_startup = 0

" Don't preserve missing EOL by default
" Enable per buffer with `let b:PreserveNoEOL = 1`
let g:PreserveNoEOL = 0

" Ignore some additional files to make CtrlP load faster
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](tmp|log|vendor|coverage|images|fonts|node_modules)$'
  \ }

" Use the current vim working directory as the CtrlP working directory
let g:ctrlp_working_path_mode = 0

" Customise dimensions of CtrlP match window (show more than 10 results)
let g:ctrlp_match_window = 'bottom,order:btt,min:20,max:20,results:25'

" Include the current file in the list of matches
let g:ctrlp_match_current_file = 1

" Let CtrlP reuse nofile buffers when opening files (e.g. BufExplorer)
" FIXME: This doesn't seem to make a blind bit of difference anymore,
" NERDTree uses a nofile buffer, and CtrlP opens files in that buffer
let g:ctrlp_reuse_window = 'netrw\|nofile'

" Prevent CtrlP opening files inside non-writeable buffers, e.g. NERDTree
" See https://vi.stackexchange.com/questions/10016/stop-ctrlp-from-opening-in-nerdtree
function! CtrlPCommand(cmd)
  let c = 0
  let wincount = winnr('$')
  " Don't open it here if current buffer is not writable (e.g. NERDTree)
  while !empty(getbufvar(+expand("<abuf>"), "&buftype")) && c < wincount
    exec 'wincmd w'
    let c = c + 1
  endwhile
  exec a:cmd
endfunction
let g:ctrlp_map = ''
nnoremap <C-p> :call CtrlPCommand('CtrlPMixed')<CR>

" Tell NERDTree to respect wildignore like CtrlP does
let NERDTreeRespectWildIgnore = 1

" Stop NERDTree from hijacking netrw, I want to use both :-)
let NERDTreeHijackNetrw = 0

" Show hidden files in NERDTree (same as netrw)
let NERDTreeShowHidden = 1

" Custom statusline for NERDTree (just show buffer name, e.g. NERD_tree_1)
" Another option to consider is to show the currently selected file, e.g.
" https://github.com/vim-airline/vim-airline/issues/271#issuecomment-40597276
let NERDTreeStatusline = '%t'

" Always show the netrw banner, so it's not mistaken for NERDTree
let g:netrw_banner = 1

" Don't go back to netrw when choosing to edit the alternate file,
" actually go back to the last edited file (same as bufexplorer)
let g:netrw_altfile = 1

" Workaround for NerdTreeToggle failures when NerdTree buffer deleted
" See https://github.com/scrooloose/nerdtree/issues/162#issuecomment-107643011
function! NERDTreeCommand()
  try | NERDTreeToggle | catch | NERDTree | endtry
endfunction

" Skip editorconfig with fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Prevent editorconfig from enabling automatic text wrapping
let g:EditorConfig_preserve_formatoptions = 1

" Disable editorconfig use of colorcolumn to highlight long lines
" See custom autocmd, which subtly highlights long lines instead
let g:EditorConfig_max_line_indicator = 'none'

" Don't autohide scratch window when leaving insert mode
let g:scratch_insert_autohide = 0

" Stop auto-pairs from jumping when manually inserting a closing pair
let g:AutoPairsMultilineClose = 0

" Highlight JSX embedded in javascript files
let g:jsx_ext_required = 0

" Don't set up any gitgutter key mappings (I only use it to show the diff)
let g:gitgutter_map_keys = 0

" Disable gitgutter by default, enable as needed using gd mapping (see below)
let g:gitgutter_enabled = 0

" Disable gd mapping for GoDef command, gd = git diff, use CTRL-[ for GoDef
let g:go_def_mapping_enabled = 0

" map leader to comma so it's in the same position on all keyboards
let mapleader = ","

" Add M mapping to use easyclip function to move until EOL
nmap M <Plug>MoveMotionEndOfLinePlug

" Stop opening the command line history by accident
nnoremap q: :q

" Stop recording commands into registers by accident
nnoremap q :q

" Retain selection after shifting highlighted lines in visual mode
vnoremap > >gv
vnoremap < <gv

" Move block selections around in visual mode with schlepp plugin
vmap <C-Up> <Plug>SchleppUp
vmap <C-Down> <Plug>SchleppDown
vmap <C-Left> <Plug>SchleppLeft
vmap <C-Right> <Plug>SchleppRight

" Allow standard windows & gnome shortcuts to shift lines (for pairing)
vnoremap <Tab> >
vnoremap <S-Tab> <

" Tab navigation with Ctrl-Tab (only works in gui vim)
noremap <C-Tab> :tabnext<cr>
noremap <S-C-Tab> :tabprevious<cr>

" Fold mappings (normal mode only)
" <space> toggles current fold
nnoremap <Space> za
" zz opens all folds
nnoremap zz zR
" Z closes all folds
nnoremap Z zM

" Open alternate file (simpler than CTRL-^ or CTRL-6)
nnoremap <Leader>a <C-^>

" Window mappings
" open alternate file in new vertial split
nnoremap <leader>wa :wincmd v<CR><C-^>
" old mapping to open alt file in split
nnoremap <leader>w :wincmd v<CR><C-^>
" shortcuts for opening new splits
nnoremap <leader>ws :wincmd s<CR>
nnoremap <leader>wv :wincmd v<CR>
" rotate and exchange windows
nnoremap <leader>wr :wincmd r<CR>
nnoremap <leader>wx :wincmd x<CR>
" navigation with arrow keys
nnoremap <C-Up> :wincmd k<CR>
nnoremap <C-Down> :wincmd j<CR>
nnoremap <C-Left> :wincmd h<CR>
nnoremap <C-Right> :wincmd l<CR>
" resize all windows equally
nnoremap = :wincmd =<CR>
" resize dimensions of current window
nnoremap + :wincmd +<CR>
nnoremap - :wincmd -<CR>
nnoremap > :wincmd ><CR>
nnoremap < :wincmd <<CR>

" Tag navigation
" remap CTRL-] to show list when multiple matches (use tjump)
nnoremap <C-]> g<C-]>
" use CTRL-\ to jump to definition in next available window
function! JumpToTagInSplit()
  let currword = expand("<cword>")
  let startwin = winnr()
  " Move to next window with a normal buffer
  let c = 0
  let n = winnr('$')
  while c < n
    exec 'wincmd w'
    if empty(getbufvar(+expand("<abuf>"), "&buftype"))
      break
    endif
    let c = c + 1
  endwhile
  " Back where we started? Open a new split
  if winnr() == startwin
    exec 'wincmd v'
  endif
  try
    exec "tjump ".currword
  catch
    " Go back to startwin on error
    exec startwin . "wincmd w"
    echoerr v:exception
  endtry
endfunction
nnoremap <C-\> :call JumpToTagInSplit()<CR>

" Project drawer / tree view
nnoremap <leader>d :call NERDTreeCommand()<CR>

" Show/hide git diff in sign column (uses gitgutter plugin)
nnoremap gd :GitGutterToggle<CR>

" File explorer (uses vim-vinegar plugin, enhanced netrw)
nmap <leader>e <Plug>VinegarUp

" Fuzzy finder (mixed mode)
nnoremap <leader>f :call CtrlPCommand('CtrlPMixed')<CR>

" Fuzzy find files
nnoremap <leader>ff :call CtrlPCommand('CtrlP')<CR>

" Fuzzy find buffers
nnoremap <leader>fb :call CtrlPCommand('CtrlPBuffer')<CR>

" Fuzzy find MRU files
nnoremap <leader>fm :call CtrlPCommand('CtrlPMRU')<CR>

" Fuzzy find tags
nnoremap <leader>ft :call CtrlPCommand('CtrlPTag')<CR>

" Search in files
nnoremap <expr> <Leader>s (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Ack!\<Space>"

" Search in files for word under cursor
nnoremap <leader>y :Ack! <cword><CR>

" List projects
nnoremap <leader>p :SessionSave<CR>:SessionList<CR>

" List open files/buffers
nnoremap <leader>b :ToggleBufExplorer<CR>

" List most recently used files
nnoremap <leader>m :MRU<CR>

" Outline view of current file
" Note: tagbar plugin automatically enables ballooneval globally :-(
nnoremap <leader>o :TagbarToggle<Enter>:set noballooneval<CR>

" Zoom in/out current window
nnoremap <leader>x :ZoomWin<Enter>

" Highlight whitespace
nnoremap <leader><space> :ToggleSpaceHi<Enter>

" Run ctags to (re)generate tags file
nnoremap <Leader>ct :!ctags -R .<CR>

" Toggle spell checking
inoremap <Leader>; <C-o>:setlocal spell! spelllang=en_gb<CR>
nnoremap <Leader>; :setlocal spell! spelllang=en_gb<CR>

" Some extra mappings for convenience/speed
" Single key to toggle bufexplorer, I use this all the time
nnoremap ; :ToggleBufExplorer<CR>
" <leader>g mapping for alternate file, faster than <leader>a
nnoremap <Leader>g <C-^>

" Remap gs to open Scratch window in normal rather than insert mode
let g:scratch_no_mappings = 1 " must disable plugin mappings first
nnoremap gs :Scratch<CR>

" Remove current search highlighting when redrawing screen
nnoremap <C-L> :nohl<CR>:redraw!<CR>

if has("clipboard")
  " copy to and paste from system clipboard
  set clipboard=unnamed

  if has("unnamedplus")
    " and to X11 primary selection if available
    set clipboard+=unnamedplus
  endif

  " Allow basic windows/gnome/kde editing shortcuts. Copied from mswin.vim to
  " help with pairing, but implements fewer shortcuts, and in fewer modes, so
  " this doesn't break things like the CTRL-V mapping for visual block mode.

  " CTRL-X and SHIFT-Del are Cut in visual mode
  vnoremap <C-X> "+x
  vnoremap <S-Del> "+x
  " CTRL-C and CTRL-Insert are Copy in visual mode
  vnoremap <C-C> "+y
  vnoremap <C-Insert> "+y
  " CTRL-V and SHIFT-Insert are Paste in insert and visual modes
  exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
  exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']
  inoremap <S-Insert> <C-V>
  vnoremap <S-Insert> <C-V>
  " CTRL-Z is Undo in normal and insert modes
  noremap <C-Z> u
  inoremap <C-Z> <C-O>u
  " CTRL-Y is Redo in normal and insert modes
  noremap <C-Y> <C-R>
  inoremap <C-Y> <C-O><C-R>
  " CTRL-A is Select All in normal, insert and visual modes
  noremap <C-A> gggH<C-O>G
  inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
  vnoremap <C-A> <C-C>ggVG
endif

if has('mouse')
  " enable mouse support in all modes
  set mouse=a

  " Make the mouse/trackpad work with tmux and screen
  " See https://wincent.com/blog/tweaking-command-t-and-vim-for-use-in-the-terminal-and-tmux
  if &term =~ "xterm" || &term =~ "screen"
    " as of March 2013, this works:
    set ttymouse=xterm2

    " previously, I found that ttymouse was getting reset, so had
    " to reapply it via an autocmd like this:
    autocmd VimEnter,FocusGained,BufEnter * set ttymouse=xterm2
  endif
endif

" Default format options, auto-format comments, but not code/text
set formatoptions=croql

" Additional ruby syntax highlighting
autocmd BufRead,BufNewFile {Berksfile,Gemfile,Rakefile,Capfile,Vagrantfile,Thorfile,pryrc,config.ru}
  \ set ft=ruby |

" Set conf.local filetype to conf
autocmd BufRead,BufNewFile *.conf.local set ft=conf

" Assume *.template files are json (cloudformation templates)
autocmd BufNewFile,BufRead *.template set filetype=json

" Turn on spell checking by default for git commits
autocmd FileType gitcommit setlocal spell spelllang=en_gb

" Enable syntax highlighting for long lines in git commits
autocmd FileType gitcommit setlocal synmaxcol=0

" Auto-indent bulletted lists in git commits (treat like comments)
autocmd FileType gitcommit setlocal comments+=fb:-
autocmd FileType gitcommit setlocal formatoptions+=cro

" Re-enable automatic text wrapping for git commits
autocmd FileType gitcommit setlocal formatoptions+=t

" Treat annotated git tags as git commits
autocmd BufNewFile,BufRead TAG_EDITMSG set filetype=gitcommit

" Automatically wrap markdown text at 80 characters
autocmd FileType markdown setlocal textwidth=80
autocmd FileType markdown setlocal formatoptions+=t

" Use html omnicompletion for xhtml documents
autocmd FileType xhtml set omnifunc=htmlcomplete#CompleteTags

" Use syntax based completion when no omnicompletion available
if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
    \	if &omnifunc == "" |
    \	  setlocal omnifunc=syntaxcomplete#Complete |
    \	endif
  endif

" Vimcast 4 - Tidying Whitespace
" Function and autocmd to strip trailing whitespace from files when saving
function! <SID>StripTrailingWhitespace()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
" enable whitespace stripping for known file types by default
autocmd FileType * let b:strip_trailing_whitespace=1
" disable whitespace stripping for other file types as needed
autocmd FileType markdown let b:strip_trailing_whitespace=0
" enable whitespace stripping globally by default
let g:strip_trailing_whitespace=1
" strip whitespace before writing if enabled globally and for buffer
autocmd BufWritePre *
  \ if ( exists('g:strip_trailing_whitespace') && g:strip_trailing_whitespace )
  \ && ( exists('b:strip_trailing_whitespace') && b:strip_trailing_whitespace ) |
  \   call <SID>StripTrailingWhitespace() |
  \ endif

" Subtly highlight long lines rather than display colorcolumn
function! <SID>HighlightLongLines()
  for l:match in getmatches()
    if get(l:match, 'group', '') == 'ColorColumn'
      call matchdelete(get(l:match, 'id'))
    endif
  endfor
  if &textwidth > 0
    call matchadd('ColorColumn', '\%'.(&tw+1).'v.\+', -1)
  elseif &ft != 'qf' && &ft != ''
    call matchadd('ColorColumn', '\%81v.\+', -1)
  endif
endfunction
autocmd BufNewFile,BufReadPost,BufFilePost * call <SID>HighlightLongLines()

" Jump to last known cursor position when editing (except for git commits)
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft != 'gitcommit' |
  \   exe "normal! g`\"" |
  \ endif

" Diff a buffer with the file from which it was originally loaded
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif

" Set working directory when opening vim to edit a particular file
function! <SID>SetWorkingDir()
  if argc() != 0
    if isdirectory(argv(0))
      exec 'cd' argv(0)
    elseif filereadable(argv(0))
      exec 'cd %:p:h'
    end
  endif
endfunction
autocmd VimEnter * call <SID>SetWorkingDir()

" Close NERDTree before leaving vim, because it doesn't reopen correctly
" FIXME: prob should do this with all nofile, help and quickfix windows
autocmd VimLeavePre * NERDTreeClose
