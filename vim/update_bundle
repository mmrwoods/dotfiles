#!/usr/bin/env ruby

require 'fileutils'

def vim_version
  @vim_version ||= `vim --version | head -n1`.chomp.scan(/\s\d+\.\d+\s/).first.to_f
end

def plugins
  @plugins ||= {}
end

def plug(path, *args)
  opts = args.last.kind_of?(Hash) ? args.pop : {}
  if !args.empty?
    if args.all? Symbol
      opts.merge!(
        args.reduce({}) { |all, cur| all.merge( { cur => true } ) }
      )
    else
      raise ArgumentError.new "Invalid options: #{args} Array of symbols and/or single hash required"
    end
  end
  plugins[path] = opts
end

# baseline config
plug 'mmrwoods/vim-friendly', :ssh, :full, :opt

# navigation
plug 'scrooloose/nerdtree'
plug 'jlanzarotta/bufexplorer'
plug 'mmrwoods/sessionman.vim'
plug 'majutsushi/tagbar'
plug 'Yggdroot/LeaderF', build: './install.sh'
plug 'Donaldttt/fuzzyy', :ssh, :full
plug 'tpope/vim-vinegar'
plug 'yegappan/mru'
plug 'romainl/vim-qf'
plug 'tpope/vim-projectionist'

# syntax and formatters
plug 'kchmck/vim-coffee-script'
plug 'pangloss/vim-javascript'
plug 'MaxMEllon/vim-jsx-pretty'
plug 'tpope/vim-rails'
plug 'depuracao/vim-rdoc'
plug 'othree/html5.vim'
plug 'fatih/vim-go'
plug 'Vimjas/vim-python-pep8-indent'
plug 'architect/vim-plugin', name: 'architect'

# tools
plug 'ntpeters/vim-better-whitespace'
plug 'Yggdroot/indentLine'
plug 'tpope/vim-eunuch'
plug 'tpope/vim-endwise'
plug 'LunarWatcher/auto-pairs'
plug 'mtth/scratch.vim'
plug 'artnez/vim-wipeout'
plug 'tpope/vim-fugitive'
plug 'tpope/vim-bundler'
plug 'pbrisbin/vim-mkdir'
plug 'tpope/vim-surround'
plug 'chrisbra/Colorizer'
plug 'svermeulen/vim-cutlass'
plug 'tpope/vim-repeat'
plug 'airblade/vim-gitgutter'
plug 'mmrwoods/git-messenger.vim', :ssh, :full, branch: 'vim-popupwin'
plug 'zirrostig/vim-schlepp'
plug 'ciaranm/securemodelines'
plug 'dense-analysis/ale'
plug 'neoclide/coc.nvim', branch: :release
plug 'liuchengxu/vim-which-key'
plug 'yssl/QFEnter'
plug 'ludovicchabant/vim-gutentags'
plug 'voldikss/vim-floaterm'
plug 'puremourning/vimspector'
plug 'tpope/vim-sleuth'
plug 'jessekelighine/vindent.vim'
plug 'airblade/vim-rooter'
plug 'mg979/vim-visual-multi'
plug 'nixon/vim-vmath' # calculate sum, avg, min, and max of visual selection
plug 'tommcdo/vim-exchange'
plug 'tweekmonster/helpful.vim'
plug 'rhysd/committia.vim', :optional
plug 'tpope/vim-characterize'
plug 'tpope/vim-unimpaired'
plug 'chrisbra/unicode.vim'
plug 'ryanoasis/vim-devicons'
plug 'vim-test/vim-test'

# colours
plug 'NLKNguyen/papercolor-theme'
plug 'joshdick/onedark.vim'
plug 'jeffkreeftmeijer/vim-dim'

pack_dir = File.join(File.dirname(__FILE__), "pack/bundle")
# FileUtils.rm_rf(pack_dir)
FileUtils.mkdir_p("#{pack_dir}/start")
FileUtils.mkdir_p("#{pack_dir}/opt")
FileUtils.cd(pack_dir)

plugins.each do |path, opts|
  build = opts.delete(:build)
  name = opts.delete(:name)
  full = opts.delete(:full)
  ssh = opts.delete(:ssh)
  url = "#{ssh ? 'git@github.com:' : 'https://github.com/'}#{path}.git"
  optional = opts.delete(:optional) || opts.delete(:opt)
  opts = opts.map { |k, v| "--#{k}=#{v}" }.join(' ')
  opts << " --depth=1" unless full
  Dir.chdir((optional ? 'opt' : 'start')) do
    name ||= path.split('/').last.sub(/^n?vim\-/,'').sub(/(\-|\.)n?vim$/,'')
    if Dir.exists?(name)
      origin = Dir.chdir(name) { `git remote get-url origin`.chomp }
      shallow = Dir.chdir(name) { File.exists?(".git/shallow") }
      if origin != url
        puts "Skipping installation of #{url} as #{name}"
        puts "Repository exists with different origin #{origin}"
        next
      elsif full && !shallow
        puts "Skipping installation of #{url} as #{name}"
        puts "Repository exists as full clone, manually pull changes"
        next
      end
    end
    puts "Installing #{url} as #{name}"
    FileUtils.rm_rf(name)
    `env GIT_SSL_NO_VERIFY=true git clone #{opts} #{url} #{name}`
    if build
      puts "Running build command '#{build}'"
      `cd #{name} && #{build}`
    end
  end
end

# avoid applying my editorconfig settings when contributing to plugins
puts "Overriding editorconfig for package dir"
system "echo root=true > .editorconfig"

print "Updating VIM Documentation... "
system "vim -u NONE -c 'silent! helptags ALL' -c q"
puts $?.exitstatus == 0 ? "OK" : "FAILED"
