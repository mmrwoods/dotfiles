set antialias                     " MacVim: smooth fonts.
set encoding=utf-8                " Use UTF-8 everywhere.
set guioptions-=T                 " Hide toolbar.
set background=light              " Background.
colorscheme eclipse               " Familiar, and easily distinguishable from terminal windows

set guicursor=n:blinkon0          " Stop the blinking cursor from blinking and distracting me in normal mode

set clipboard=unnamed             " Use system clipboard as unamed register to allow easy copying and pasting

" open maximized
set lines=999 columns=999

" automagically save session on vim close, and reload when opening
set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize,winpos,resize
function SaveSession()
  execute 'mksession! $HOME/dotfiles/vim/.session'
endfunction
function LoadSession()
  if argc() == 0 && filereadable($HOME . '/dotfiles/vim/.session') " only load session when vim executed without any arguments
    execute 'source $HOME/dotfiles/vim/.session'
  endif
endfunction
autocmd VimEnter * call LoadSession()
autocmd VimLeave * call SaveSession()


if has("mac")

  " macvim container window gets screwed up after opening and
  " closing tabs, so map leader m to maximize (um, kind of)
  map <leader>m :set lines=999 columns=999<Enter>
  " addition - just autocmd it
  " TODO: remove the mapping if it turns out to be unnecessary
  autocmd TabEnter * set lines=999 columns=999

  " MacVim disables cocoa key bindings, but I want double S / section sign
  " mapped to hash. For some reason map doesn't work, so...
  imap ยง #
  cmap ยง #
  nmap ยง #
  vmap ยง #

  " spacehi plugin doesn't highlight tabs consistently in MacVim. Looks
  " like there's some clash between the syntax matches created by MacVim
  " and spacehi. Simple solution, use match functions instead.
  function SpaceHi()
    execute("highlight spacehiTab " . g:spacehi_tabcolor)
    let w:spaceHiMatchTabs = matchadd('spaceHiTab', '\t')
    execute("highlight spacehiTrailingSpace " . g:spacehi_spacecolor)
    let w:spaceHiMatchTrailingSpace = matchadd('spaceHiTrailingSpace', '\s\+$')
    let w:spacehi = 1
  endfunction

  function NoSpaceHi()
    if exists('w:spaceHiMatchTabs')
      call matchdelete(w:spaceHiMatchTabs)
    endif
    if exists('w:spaceHiMatchTrailingSpace')
      call matchdelete(w:spaceHiMatchTrailingSpace)
    endif
    let w:spacehi = 0
  endfunction

  function ToggleSpaceHi()
    if exists("w:spacehi") && w:spacehi
      call NoSpaceHi()
      echo "spacehi off"
    else
      call SpaceHi()
      echo "spacehi on"
    endif
  endfunction

  com! SpaceHi call SpaceHi()
  com! NoSpaceHi call NoSpaceHi()
  com! ToggleSpaceHi call ToggleSpaceHi()

  map! <silent> <F3> ToggleSpaceHi<CR>

endif

if has("gui_gtk")

  " always show tabline on laptop screen
  if system("/usr/bin/xrandr | awk -F',' '/Screen 0/ {gsub(\"( |current)\",\"\");printf $2}'") == "1024x768"
    set showtabline=2
  endif

  " windows keyboard shortcuts for gvim (a bit of a sledgehammer, but it'll do for now)
  source $VIMRUNTIME/mswin.vim
  " disable mswin mouse and select behaviour (mswin.vim sets this)
  behave xterm

  try
    " yank to and paste from X11 clipboard if possible
    set clipboard=unnamedplus
  catch /E474:/ " invalid argument before vim 7.3.074
    " hack older versions of gvim to mimick use of X11 clipboard
    " update cut, copy and paste mappings to use unnamed register
    vnoremap <C-X> "*x
    vnoremap <S-Del> "*x
    vnoremap <C-C> "*y
    vnoremap <C-Insert> "*y
    map <C-V> "*gP
    map <S-Insert> "*gP
    " copy clipboard selection register to unnamed register when gvim gains gui focus
    autocmd FocusGained * let @*=@+
  endtry

endif

" WIP - RadRails colours
hi String guifg=#2a00ff gui=none
hi Number guifg=#0080ff gui=none
hi Comment guifg=#658173 gui=none
hi Special guifg=#2a00ff gui=none
hi Type guifg=#a4357a gui=none
hi Constant guifg=#a4357a gui=none " applies to nil, self etc.
hi rubyDefine guifg=#a4357a gui=bold
hi rubyAccess guifg=#a4357a gui=bold
hi rubyBeginEnd guifg=#a4357a gui=bold
hi rubyControl guifg=#a4357a gui=bold
hi rubyBoolean guifg=#a4357a gui=none
hi rubyFunction guifg=#683821 gui=none
hi rubyIdentifier guifg=#683821 gui=none
hi rubyConditional guifg=#a4357a gui=bold
hi rubyComment guifg=#658173 gui=none
hi rubyString guifg=#2a00ff gui=none
"hi rubyInteger guifg=#0080ff gui=none
"hi rubyFloat guifg=#0080ff gui=none
hi rubyGlobalVariable guifg=#ff0000 gui=none
hi rubyRegExpSpecial guifg=#5a1ea0 gui=none
hi rubySymbol guifg=#ff4040 gui=bold
hi rubyClassVariable guifg=#004080 gui=bold
hi rubyInstanceVariable guifg=#004080 gui=bold
