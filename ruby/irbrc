require 'rubygems'
require 'irb/completion'

IRB.conf[:PROMPT][:CUSTOM] = {
  :PROMPT_I => "%N(%m)> ",
  :PROMPT_C => "%N(%m)* ",
  :PROMPT_N => "%N(%m)* ",
  :PROMPT_S => "%N(%m)%l ",
  :RETURN => "%s\n"
}

IRB.conf[:PROMPT_MODE] = :CUSTOM
IRB.conf[:AUTO_INDENT] = true
IRB.conf[:SAVE_HISTORY] = 100
IRB.conf[:HISTORY_FILE] = IRB.rc_file('_history')

def bundle(gem)
  return if Bundler.definition.current_dependencies.map(&:name).include?(gem)
  spec_path = Gem.path.map{ |dir|
    Dir.glob("#{dir}/specifications/#{gem}-[0-9]*.gemspec").last
  }.compact.first
  return if spec_path.nil?
  spec = Gem::Specification.load(spec_path)
  $LOAD_PATH.concat(Dir.glob(spec.lib_dirs_glob))
  spec.runtime_dependencies.each{ |dependency|
    bundle(dependency.name)
  }
end

def try_require(lib,gem=lib)
  bundle(gem) if defined? Bundler
  require lib
  yield if block_given?
rescue LoadError
  cmd = "gem install #{gem}"
  if system("which rvm &> /dev/null") && !Gem.path.grep(/@global/).empty?
    cmd = "rvm @global do #{cmd}"
  end
  warn $!.message.sub(/\.$/,'') + ". Try running '#{cmd}'"
end

if %w{ script/rails rails_console }.include?($0)

  # automagically use pry as rails console
  try_require 'pry' do
    Pry.start
    exit
  end

else

  # use wirble to fix irb history on osx
  try_require 'wirble', 'blackwinter-wirble' do
    Wirble.init(
      :history_path => IRB.conf[:HISTORY_FILE],
      :history_size => IRB.conf[:SAVE_HISTORY]
    )
  end

  # colourize output using awesome print
  try_require 'awesome_print' do
    alias pp ap
    IRB::Irb.class_eval do
      def output_value
        ap @context.last_value, :multiline => false
      end
    end
  end

  # add hirb console methods (table, view, etc.)
  try_require 'hirb' do
    extend Hirb::Console
  end

end
