# use vim to edit
Pry.editor = 'vim'

# Use project directory as prompt name if running a rails console
if $0.include?("rails")
  Pry.config.prompt_name = File.basename(Rails.root)
end

# Simplified prompts (copy of default prompt with input array size removed)
Pry.prompt = [
  proc { |target_self, nest_level, _|
    "#{Pry.config.prompt_name}(#{Pry.view_clip(target_self)})#{":#{nest_level}" unless nest_level.zero?}> "
  },
  proc { |target_self, nest_level, _|
    "#{Pry.config.prompt_name}(#{Pry.view_clip(target_self)})#{":#{nest_level}" unless nest_level.zero?}* "
  }
]

def bundle(gem)
  return if Bundler.definition.current_dependencies.map(&:name).include?(gem)
  spec_path = Gem.path.map{ |dir|
    Dir.glob("#{dir}/specifications/#{gem}-[0-9]*.gemspec").last
  }.compact.first
  return if spec_path.nil?
  spec = Gem::Specification.load(spec_path)
  $LOAD_PATH.concat(Dir.glob(spec.lib_dirs_glob))
  spec.runtime_dependencies.each{ |dependency|
    bundle(dependency.name)
  }
end

def try_require(lib,gem=lib)
  bundle(gem) if defined? Bundler
  require lib
  yield if block_given?
rescue LoadError
  cmd = "gem install #{gem}"
  if system("which rvm &> /dev/null") && !Gem.path.grep(/@global/).empty?
    cmd = "rvm @global do #{cmd}"
  end
  warn $!.message.sub(/\.$/,'') + ". Try running '#{cmd}'"
end

# basic debugger style navigation from binding.pry
try_require 'pry-nav' do
  Pry.commands.alias_command 'cont', 'continue' rescue nil
  Pry.commands.alias_command 'c', 'continue' rescue nil
  Pry.commands.alias_command 's', 'step' rescue nil
  Pry.commands.alias_command 'n', 'next' rescue nil
end

# warn if pry-doc not installed
try_require 'pry-doc'

# use solarized theme - see https://github.com/kyrylo/pry-theme
try_require 'pry-theme'do
  Pry.config.theme = 'solarized'
end

# add rails console and pry-rails helper methods
if defined?(Rails) && Rails.version >= "3"
  extend Rails::ConsoleMethods if defined?(Rails::ConsoleMethods)
  try_require 'pry-rails'
end

# colourize output using awesome print
try_require 'awesome_print' do
  alias pp ap
  Pry.config.print = proc {|output, value|
    output.puts ap(value, :multiline => false)
  }
end

# add hirb console methods (table, view, etc.)
try_require 'hirb' do
  extend Hirb::Console
end
