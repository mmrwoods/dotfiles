#!/bin/bash

export EDITOR=vim

# Set TERM to something suitable for local and remote systems
# Note: SSH client always sends the TERM env var to the server
export TERM='xterm-256color'

# solarized dark colours for BSD ls command
export CLICOLOR=1
export LSCOLORS=exfxfeaeBxxehehbadacea

# solarized dark colours for GNU ls & readline colored-stats
if which gdircolors &> /dev/null; then
  eval `gdircolors ~/dotfiles/bash/dircolors-solarized.ansi-dark`
fi

# Copy path before munging so we can restore it when reloading the shell
export ORIGINAL_PATH=$PATH

# Set the node path to allow use of globally installed modules
export NODE_PATH=/usr/local/lib/node_modules

# Cucumber comments are grey by default, hard to see using solarized dark
export CUCUMBER_COLORS=comment=cyan

# GREP_OPTIONS depreated for GNU grep, so hack it with aliases
GREP_OPTIONS='--color=auto --exclude=tags --exclude-dir=.git'
for cmd in grep fgrep egrep; do
  eval 'alias $cmd="$cmd $GREP_OPTIONS"'
  if which g$cmd &> /dev/null; then
    eval 'alias g$cmd="g$cmd $GREP_OPTIONS"'
  fi
done

# Spring is a PITA for anything other than simple development workflows
# Use spring command to explicitly use as required (see aliases below)
export DISABLE_SPRING=1

# Stop homebrew from auto-updating, which can cause mayhem
export HOMEBREW_NO_AUTO_UPDATE=1

# Stop homebrew from upgrading all dependencies, more mayhem
export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
export HOMEBREW_NO_INSTALL_UPGRADE=1

alias which="/usr/bin/which" # fuck you node-which

# set homebrew env vars and paths
if test -f /usr/local/bin/brew; then
  eval $(/usr/local/bin/brew shellenv)
elif test -f /opt/homebrew/bin/brew; then
  eval $(/opt/homebrew/bin/brew shellenv)
fi

# add /usr/local/sbin to path if necessary
if ! echo $PATH | grep /usr/local/sbin &> /dev/null; then
  export PATH=${PATH/\/usr\/sbin//usr/local/sbin:/usr/sbin}
fi

# add /usr/local/bin to path if necessary
if ! echo $PATH | grep /usr/local/bin &> /dev/null; then
  export PATH=${PATH/\/usr\/bin//usr/local/bin:/usr/bin}
fi

export PATH=$HOME/bin:$PATH

# add nodenv shims to path and enable nodenv autocompletion
if which nodenv &> /dev/null; then eval "$(nodenv init --no-rehash -)"; fi

# add rbenv shims to path and enable rbenv autocompletion
if which rbenv &> /dev/null; then eval "$(rbenv init --no-rehash -)"; fi

# add project specific binaries to path (e.g. rails binstubs)
# Note: bundler binstubs should have precedence in path to avoid confusion
# finding gem binary paths when mixing rails binstubs and bundler binstubs
export PATH="./bin:$PATH"

# add bundler binstubs to path (see ~/dotfiles/ruby/bundler)
export PATH="./.bundle/bin:$PATH"

# add npm binstubs to path (not sure about this, there is a node-which afer all)
export PATH="./node_modules/.bin:$PATH"

# Stop once env vars set if stdout not a terminal or shell not bash
# Allows file be sourced from files other than .bash_profile, without
# causing problems when sudo is configured to keep HOME env variable
# and/or target user's shell is bourne compatible, but not bash
# FIXME: clean up this garbage, use .profile and .bash_profile (is this
# even necessary anymore? I think this is from my old ubuntu/dash days)
if [ ! -t 1 ] || [ $(basename $SHELL) != 'bash' ]; then
  return
fi

if [ ${BASH_VERSINFO[0]} -lt 4 ]; then
  echo Warning from ${BASH_SOURCE[0]} >&2
  echo Old bash version detected, $BASH_VERSION, some things might not work >&2
  if test -n "$HOMEBREW_PREFIX"; then
    echo "Use homebrew installed bash as your login shell to fix this:" >&2
    echo "    brew install bash" >&2
    echo "    sudo sh -c \"echo $HOMEBREW_PREFIX/bin/bash >> /etc/shells\"" >&2
    echo "    chsh -s $HOMEBREW_PREFIX/bin/bash" >&2
  fi
fi

# Hack cd to automatically push to the directory stack, but avoid duplicates
# Similar to zsh with setopt autopushd pushdignoredups pushdsilent pushdtohome
function cd() {
  builtin pushd -n "$PWD" > /dev/null
  builtin cd "$@" # do not return on fail, we've already pushed to the stack
  lastpos=$( builtin dirs -l -v | grep -E "${PWD}$" | tail -n 1 | awk '{print $1}' )
  if [ "$lastpos" -gt 0 ]; then
    builtin popd "+${lastpos}" > /dev/null || return
  fi
}

# Select a directory from the stack and switch to it
function d() {
  # old_columns=$COLUMNS
  # COLUMNS=10; select dir in $(builtin dirs -l -p | head -n10); do cd "$dir" || break; break; done
  # COLUMNS=$old_columns
  dir=$(gum choose $(builtin dirs -l -p | head -n10)) && cd "$dir"
}

# Select from VIM MRU files and edit
function f() {
  # old_columns=$COLUMNS
  # COLUMNS=10; select file in $(head -n11 ~/.vim_mru_files | tail -n10); do vim $file; break; done
  # COLUMNS=$old_columns
  file=$(gum choose $(head -n11 ~/.vim_mru_files | tail -n10)) && vim "$file"
}

# bash completion
if [ $HOMEBREW_PREFIX ] && [ -r $HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh ]; then
  source $HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh
  if [ -z $BASH_COMPLETION_COMPAT_DIR ]; then
    export BASH_COMPLETION_COMPAT_DIR=$HOMEBREW_PREFIX/etc/bash_completion.d
  fi
fi

# fix Cisco Umbrella, use Homebrew installed CA certs with cli tools
# ca-certificates formula adds Cisco Umbrella Root CA from keychain
if test -n "$HOMEBREW_PREFIX" ; then
  if test -f ${HOMEBREW_PREFIX}/etc/ca-certificates/cert.pem ; then
    export SSL_CERT_FILE=${HOMEBREW_PREFIX}/etc/ca-certificates/cert.pem
  fi
fi
if test -n "$SSL_CERT_FILE" ; then
  for var in NODE_EXTRA_CA_CERTS BUNDLE_SSL_CA_CERT REQUESTS_CA_BUNDLE CURL_CA_BUNDLE ; do
    export $var=$SSL_CERT_FILE
  done
fi

# git prompt and completion
if ! type __git_ps1 &> /dev/null; then
  source ~/dotfiles/bash/git-prompt.sh
fi
if ! type __git_complete &> /dev/null; then
  source ~/dotfiles/bash/git-completion.bash
fi

# capistrano command completion
source ~/dotfiles/bash/capistrano.bash

# knife solo command completion
source ~/dotfiles/bash/knife-solo-completion.bash

# git prompt for local workstation
if [ -z "$SSH_CLIENT" ]; then
  GIT_PS1_SHOWDIRTYSTATE=1
  PS1='\w$(__git_ps1 "[%s]")\$ '
fi

# if some kind of xterm, use prompt command to set window title
if [ "${TERM%%-*}" == xterm ]; then
  PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'
fi

# Allow CTRL-s to be used to search history forward
# Disables CTRL-s mapping to stop terminal output (not needed)
stty -ixon

# quick hack to create aliases for starting and stopping postgres
if [ $HOMEBREW_PREFIX ] && [ -r $HOMEBREW_PREFIX/var/postgres ]; then
  alias pg_start="pg_ctl -D $HOMEBREW_PREFIX/var/postgres -l $HOMEBREW_PREFIX/var/postgres/server.log start"
  alias pg_stop="pg_ctl -D $HOMEBREW_PREFIX/var/postgres stop -s -m fast"
fi

# reload bash shell (I always forget how)
alias reload="export PATH=$ORIGINAL_PATH; exec $SHELL -l"

# highlight error output from git commands in red
# - highlights based on pattern match as stderr not only used for errors
# - only modifies output when both stderr and stdout are terminals
# - uses script command to ensure git sees output streams as terminals
# - only modifies output for whitelisted commands to avoid pager issues
# - doesn't work with git alises for whitelisted commands (this sucks)
# - currently relies on BSD sed, so only used with MacOS (also sucks)
if test $(uname) == Darwin; then
  git_err_red() {
    if test -t 1 && test -t 2 && [[ "$@" =~ (push|pull|clone|fetch|po|toggle) ]]; then
      script -q /dev/null ${1+"$@"} | sed -l -E $'s/^(fatal|error).*/\e[31m&\e[m/'
    else
      "$@"
    fi
  }
  alias git="git_err_red git"
fi

# Hack readline support for Homebrew installed MySQL client, because
# vi key bindings in editline are infuriating. This will surely break
# something, and has not been tested with mariadb or percona clients.
# if test $(uname) == Darwin && which rlwrap &>/dev/null; then
#   readline_wrap_mysql() {
#     rlwrap --always-readline --no-children mysql "$@"
#   }
#   alias mysql="readline_wrap_mysql"
# fi

# use xdg-open on Linux
if test -n "$XDG_CURRENT_DESKTOP"; then
  alias open="xdg-open"
fi

# because I keep forgetting how to do it in Linux
if ! which pbcopy &> /dev/null && which xclip &> /dev/null; then
  alias pbcopy="xclip -selection clipboard"
  alias pbpaste="xclip -o -selection clipboard"
fi

alias p='ping www.google.com'

alias v='vim'
alias vi='vim'
alias mvim='vim -u ~/.vim/vimrc.minimal'
alias pvim='vim -u ~/.vim/vimrc.private'

alias h='history'
alias hs='history'

alias b='bundle'
alias bi='bundle install'
alias be='bundle exec'

alias c='bundle exec cucumber -r features'
alias cw='bundle exec cucumber -r features -p wip'
alias cq='bundle exec cucumber -r features --tags ~@javascript --tags ~@slow'
alias cj='bundle exec cucumber -r features --tags @javascript'
alias r='bundle exec rspec spec'
alias rw='bundle exec rspec spec --tag wip'
alias rf='bundle exec rspec spec --only-failures'

alias sc='spring cucumber -r features'
alias scw='spring cucumber -r features -p wip'
alias scq='spring cucumber -r features --tags ~@javascript --tags ~@slow'
alias scj='spring cucumber -r features --tags @javascript'
alias sr='spring rspec spec'
alias srw='spring rspec spec --tag wip'
alias srf='spring rspec spec --only-failures'

alias t='tig'
# FIXME: rewrite this mess to just get the current completion
# function the tig command and assign the same to the t alias
if type _tigcomp 2>/dev/null; then
  # old tig completion, uses custom functions
  complete -o default -o nospace -F _tig t
else
  # new tig completion, uses git completion
  if type _tig 2>/dev/null; then
    __git_complete t _tig
  else
    # new, new tig completion, no _tig function, sigh
    __git_complete t __tig_main
  fi
fi

alias g='git'
complete -o default -o nospace -F _git g

alias ga='git add'
alias gd='git diff'
alias gf='git fetch'
alias gl='git log --decorate --stat'
alias gp='git peek' # peek at the last commit, see git config
alias gs='git status' # takes precedence over ghostscript in path
alias gt='git toggle' # switch to previous branch, see git config
alias gc-='git checkout -'
alias gca='git commit -v -a'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gcv='git commit -v'
alias gdc='git diff --cached'
alias gpo='git po' # push current branch to origin, see git config
alias gpr='git pr' # pull from origin with rebase, see git config
alias gpt='git push --tags'
alias grd='git rd' # remove deleted files, see git config
alias gsl='git select'

__git_complete ga _git_add
__git_complete gd _git_diff
__git_complete gf _git_fetch
__git_complete gl _git_log
__git_complete gs _git_status
__git_complete gca _git_commit
__git_complete gco _git_checkout
__git_complete gcb _git_checkout
__git_complete gcv _git_commit
__git_complete gdc _git_diff

# Fudge bash completion for complex git aliases which run external commands
# See https://coderwall.com/p/d2w7oa/auto-completion-within-complex-git-alias
_git_rs() { _git_reset ; }
_git_rss() { _git_reset ; }
_git_rsh() { _git_reset ; }
_git_squash() { _git_rebase ; }

# alias for thefuck, https://github.com/nvbn/thefuck
alias fuck='eval $(thefuck $(fc -ln -1)); history -r'

# z command to jump to frecent dirs, see https://github.com/rupa/z
# Note: must come after setting PROMPT_COMMAND. In Bash, z appends
# a command to the PROMPT_COMMAND env var to maintain its database.
export _Z_EXCLUDE_DIRS=($HOME/Backup $HOME/tmp /tmp /private)
export _Z_NO_RESOLVE_SYMLINKS=1
source ~/dotfiles/bash/z.sh

# Remove z completion, replaces completion word with / when no match
complete -r z 2> /dev/null

# Use fzf prompt with z, don't auto-jump to most frecent match, unpredictable
# From https://github.com/junegunn/fzf/wiki/Examples#integration-with-z
# Modified to prompt when single non-option alphanumeric argument provided
if which fzf &> /dev/null; then
  unalias z 2> /dev/null
  function z() {
    [ $# -gt 1 ] || [[ $1 =~ [^[:alnum:]] ]] && { _z "$*"; return; }
    cd "$(_z -l $1 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
  }
  function _z_completion()
  {
    local cur cmd
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    [[ $prev =~ ^- ]] && return
    local matches=`awk -F\| '{print $1}' ~/.z | sed -E 's/(\/|-)/\n/g' | grep -i ^$cur | sort -u`
    COMPREPLY=($(compgen -W "${matches}" ${cur}))
  }
  complete -F _z_completion z
fi

# Make random password containing letters, digits and an underscore somewhere
# The resulting password is a vim/regex word, so it's easy to copy and paste
mkpw() {
  # required password length, default 20, override with script arg, e.g. mkpw 30
  reqlength=${1:-20}
  # get some random bytes, uuencode them, and extract reqlength alphanumeric chars
  randomstr=`head /dev/urandom | uuencode -m - | sed -n 2p | tr -d '/+' | cut -c1-${reqlength}`
  # if randomstr doesn't have any digits, add one in some random position
  if ! echo $randomstr | egrep '\d' >/dev/null; then
    randomstr=`echo $(( RANDOM % 10 ))$randomstr | cut -c1-${reqlength}`
  fi
  # insert underscore somewhere to make stupid password strength meters happy
  # don't insert at beginning or end, simply because I find this offputting
  punctchar="_"
  insertpos=`awk -v min=2 -v max=$(($reqlength-1)) 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'`
  randomstr=`echo $randomstr | sed s/./\$punctchar/$insertpos`
  # print password, only adding a new line if stdout is a tty, which allows
  # stdout to be piped to stdin for another program, e.g. mkpw | pbcopy
  printf $randomstr
  if [ -t 1 ] ; then printf '\n'; fi
}

# what is my ip again?
whatismyip() { curl -s http://ipv4.icanhazip.com/ | tr -d '\n' ; if [ -t 1 ] ; then echo; fi }
