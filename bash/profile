#!/bin/bash

export TERM='xterm-color'
export CLICOLOR=1
export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD
export PATH=$PATH:$HOME/bin

export EDITOR=vim

export NODE_PATH=/usr/local/lib/node_modules

export CUCUMBER_COLORS=comment=cyan

# check if homebrew is installed and update path such that
# homebrew binaries take precedence over system binaries
if which brew &> /dev/null; then
  has_brew=true
  brew_prefix=`brew --prefix`
  export PATH=$brew_prefix/bin:$brew_prefix/sbin:$PATH
fi

# add rbenv shims to path and enable rbenv autocompletion
if which rbenv &> /dev/null; then eval "$(rbenv init -)"; fi

# add bundler binstubs to path (see ~/dotfiles/ruby/bundler)
export PATH="./.bundle/bin:$PATH"

# add project specific binaries to path (e.g. rails binstubs)
export PATH="./bin:$PATH"

# Bash specific, i.e. not bourne shell compatible stuff goes here.
# Allows file be sourced from .profile, without causing problems
# when sudo is configured to keep the HOME env variable and target
# user's shell is bourne compatible, but not bash.
if [ $SHELL = '/bin/bash' ]; then

  # bash completion
  if [ $has_brew ] && [ -r $brew_prefix/etc/bash_completion ]; then
    source $brew_prefix/etc/bash_completion
  fi

  # git completion
  if ! type __git_ps1 &> /dev/null; then
    source ~/dotfiles/bash/git-completion.sh
  fi

  # capistrano command completion
  source ~/dotfiles/bash/capistrano.bash

  # rails command completion
  # TODO: try https://github.com/mernen/completion-ruby
  if [ ${BASH_VERSINFO[0]} -ge 4 ]; then
    source ~/dotfiles/bash/rails.bash
  fi

  # rvm command completion
  if [ -r $rvm_path/scripts/completion ]; then
    source $rvm_path/scripts/completion
  fi

  # git prompt
  GIT_PS1_SHOWDIRTYSTATE=1
  PS1='\w$(__git_ps1 "[%s]")\$ '

  # if some kind of xterm, use prompt command to set window title
  if [ "${TERM%%-*}" == xterm ]; then
    PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'
  fi

  # quick hack to create aliases for starting and stopping postgres
  if [ $has_brew ] && [ -r $brew_prefix/var/postgres ]; then
    alias pg_start="pg_ctl -D $brew_prefix/var/postgres -l $brew_prefix/var/postgres/server.log start"
    alias pg_stop="pg_ctl -D $brew_prefix/var/postgres stop -s -m fast"
  fi

  # alias vim to macvim's huge vim on osx unless vim found in /usr/local/bin
  # see https://github.com/mxcl/homebrew/issues/5148
  # note: does not help when external programs launch vim as editor, to fix this
  # override system vim with `brew install macvim --with-override-system-vim`
  if [ $has_brew ] && [ ! -r $brew_prefix/bin/vim ]; then
    macvim_version=`brew list --versions macvim | sed 's/.* \([0-9\.\-]*\)$/\1/'`
    if [ -n "${macvim_version}" ]; then
      alias vim=$brew_prefix/Cellar/macvim/$macvim_version/MacVim.app/Contents/MacOS/Vim
    fi
  fi

  # reload bash shell (I always forget how)
  alias reload="exec bash -l"

  # highlight error output from git commands in red
  # - highlights based on pattern match as stderr not only used for errors
  # - only modifies output when both stderr and stdout are terminals
  # - uses script command to ensure git sees output streams as terminals
  # - only modifies output for whitelisted commands to avoid pager issues
  # - doesn't work with git alises for whitelisted commands (this sucks)
  # - currently relies on BSD sed, so only used with OSX (also sucks)
  if test $(uname) == Darwin; then
    git_err_red() {
      if test -t 1 && test -t 2 && [[ "$@" =~ (push|pull|clone|fetch|po|toggle) ]]; then
        script -q /dev/null ${1+"$@"} | sed -l -E $'s/^(fatal|error).*/\e[31m&\e[m/'
      else
        "$@"
      fi
    }
    alias git="git_err_red git"
  fi

fi

# add /usr/local/sbin to path if necessary
if ! echo $PATH | grep /usr/local/sbin &> /dev/null; then
  PATH=$PATH:/usr/local/sbin
fi

# use gnome-open rather than openvt
if which gnome-open &> /dev/null; then
  alias open="gnome-open"
fi

# because I keep forgetting how to do it in Linux
if ! which pbcopy &> /dev/null && which xclip &> /dev/null; then
  alias pbcopy="xclip -selection clipboard"
  alias pbpaste="xclip -o -selection clipboard"
fi

# vi keyboard shortcuts
set -o vi

alias h='history'
alias hs='history'

alias egrep='egrep --color=auto --exclude=tags'
alias fgrep='fgrep --color=auto --exclude=tags'
alias grep='grep --color=auto --exclude=tags'

alias b='bundle'
alias bi='bundle install'
alias be='bundle exec'

alias c='bundle exec cucumber -r features'
alias cw='bundle exec cucumber -r features -p wip'
alias cq='bundle exec cucumber -r features --tags ~@javascript --tags ~@slow'
alias cj='bundle exec cucumber -r features --tags @javascript'
alias r='bundle exec rspec spec'
alias rw='bundle exec rspec spec --tag wip'

alias sc='spring cucumber -r features'
alias scw='spring cucumber -r features -p wip'
alias scq='spring cucumber -r features --tags ~@javascript --tags ~@slow'
alias scj='spring cucumber -r features --tags @javascript'
alias sr='spring rspec spec'
alias srw='spring rspec spec --tag wip'

alias t='tig'

alias g='git'
complete -o default -o nospace -F _git g

alias ga='git add'
alias gd='git diff'
alias gf='git fetch'
alias gl='git log --decorate --stat'
alias gp='git peek' # peek at the last commit, see git config
alias gs='git status' # takes precedence over ghostscript in path
alias gt='git toggle' # switch to previous branch, see git config
alias gc-='git checkout -'
alias gca='git commit -v -a'
alias gco='git checkout'
alias gcv='git commit -v'
alias gdc='git diff --cached'
alias gpo='git po' # push current branch to origin, see git config
alias gpr='git pull --rebase'
alias grd='git rd' # remove deleted files, see git config

__git_complete ga _git_add
__git_complete gd _git_diff
__git_complete gf _git_fetch
__git_complete gl _git_log
__git_complete gs _git_status
__git_complete gca _git_commit
__git_complete gco _git_checkout
__git_complete gcv _git_commit
__git_complete gdc _git_diff

# Fudge bash completion for complex git aliases which run external commands
# See https://coderwall.com/p/d2w7oa/auto-completion-within-complex-git-alias
_git_rs() { _git_reset ; }
_git_rss() { _git_reset ; }
_git_rsh() { _git_reset ; }

if [ -f /usr/local/bin/ctags ]; then
  alias ctags='/usr/local/bin/ctags'
fi

# alias for thefuck, https://github.com/nvbn/thefuck
alias fuck='eval $(thefuck $(fc -ln -1)); history -r'

# make random password
mkpw() { head /dev/urandom | uuencode -m - | sed -n 2p | tr -d '/+' | cut -c1-${1:-20} | tr -d '\n'; }

# what is my ip again?
whatismyip() { curl -s http://icanhazip.com/ ; }
