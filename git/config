[apply]
  whitespace = fix
[core]
  editor = vim
  autocrlf = input
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  # warn about tabs and trailing spaces
  whitespace = space-before-tab,tab-in-indent,trailing-space
[color]
  ui = true
[branch]
  # pull with rebase by default on new tracking branches
  autosetuprebase = always
[branch "master"]
  # pull with rebase by default on master
  rebase = true
[branch "develop"]
  # pull with rebase by default on develop
  rebase = true
[advice]
  # disable how to stage/unstage/add advice from git status
  statusHints = false
  # disable hints when pushing something not fast-forwardable
  pushNonFastForward = false
[push]
  # push the current branch to its upstream branch by default
  default = tracking
[diff]
  # allow git diff to detect renames and copies
  renames = copies
[merge]
  # show diffstat at the end of a merge
  stat = true
[alias]
  # list all aliases, taken from git wiki
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | egrep --color '^\\w+'

  # fairly common shortcut alises
  aa = add -A
  au = add -u
  ap = add -p
  br = branch
  ba = branch -a
  ci = commit -v
  cv = commit -v
  ca = commit -va
  co = checkout
  cb = checkout -b
  cp = cherry-pick
  df = diff
  dc = diff --cached
  dw = diff --word-diff
  pr = pull --rebase
  rb = rebase
  st = status
  sh = show
  l1 = log --oneline
  lp = log --patch --decorate
  
  # push current branch to origin
  po = "!bash -c 'git symbolic-ref --short HEAD | xargs git push $@ origin'" -

  # switch to most recently checked out ref
  c- = checkout - # note: equivalent to checkout @{-1}

  # switch to most recently checked out symbolic ref
  # useful for toggling between a feature branch and the main branch
  toggle = "!bash -c 'set -e; branch=$(git symbolic-ref --short HEAD); git reflog | egrep \"checkout: moving from .* to $branch\" | egrep -v \"from ($branch|head)\" | egrep -v \"from .{41,}\" | head -n1 | sed s\"/^.*from //\" | cut -f1 -d\" \" | xargs git checkout'"

  # reset aliases, pass number as argument to reset to a previous head, e.g. git rsh 2
  # TODO: fudge bash command completion for these aliases somehow
  rs = "!bash -c 'if test \"$1\" -eq \"$1\" 2>/dev/null; then git reset HEAD~${1:-0}; else git reset $@; fi'" -
  rss = "!bash -c 'if test \"$1\" -eq \"$1\" 2>/dev/null; then git reset --soft HEAD~${1:-0}; else git reset --soft $@; fi'" -
  rsh = "!bash -c 'if test \"$1\" -eq \"$1\" 2>/dev/null; then git reset --hard HEAD~${1:-0}; else git reset --hard $@; fi'" -

  # list commits in current branch with relative author date, author name and refnames
  ls = log --pretty=format:'%C(yellow)%h %Creset%s %C(green)(%ar) %Cblue<%an>%C(cyan)%d'

  # list commits from all branches with text-based graphical representation of commit history
  lg = log --pretty=format:'%C(yellow)%h %Creset%s %C(green)(%ar) %Cblue<%an>%C(cyan)%d' --graph --all

  # detailed log of commits in current branch, showing what changed in each commit
  wc = log --decorate --stat --format=fuller

  # remove deleted (I'm sure there's an easier way to do this, but this is what I do)
  rd = !git status | grep deleted | awk '{print$NF}' | xargs git rm;}

  # list recently active/committed branches, both local and remote
  recent = !git for-each-ref --sort=-committerdate --format='%(color:yellow)%(refname:short)±%(color:green)%(committerdate:relative)±%(color:blue)%(authorname)%(color:cyan)±%(upstream:short) %(color:reset)%(subject)' --count=10 refs/{heads,remotes} | sed s'/± /±/' | column -t -s± | less -RFX

  # list most recently used/checked-out branches
  # FIXME: this is horribly brittle, find a better solution
  mru = !git reflog --date=relative --no-decorate | grep --color=no 'checkout: moving from' | head -n 100 | sed s'/checkout: moving from.*to //' | sed s'/HEAD@{/(/' | sed s'/}:/)/' | fgrep -v 'head' | grep -v '[0-9a-z]\\{40\\}' | head -n 10

  # remove changes from staging area
  unstage = reset HEAD

  # discard changes to current head
  scrap = reset --hard HEAD

  # amend the last commit
  amend = commit --amend

  # peek at the last commit
  peek = log --patch --max-count=1

  # list local branches order by committer date, but showing author name
  branches = !git for-each-ref --sort=-committerdate --format='%(color:yellow)%(refname:short)±%(color:green)%(committerdate:relative)±%(color:blue)%(authorname)%(color:cyan)±%(upstream:short) %(color:reset)%(subject)' refs/heads | sed s'/± /±/' | column -t -s± | less -RFX

  # roughly the same as above, but for remote branches
  remotes = !git for-each-ref --sort=-committerdate --format='%(color:yellow)%(refname:short)±%(color:green)%(committerdate:local)±%(color:blue)%(authorname)±%(color:reset)%(subject)' refs/remotes | column -t -s± | less -RFX

  # again, roughly the same as above, but this time for tags
  tags = !git for-each-ref --sort=-taggerdate --format='%(color:yellow)%(refname:short)±%(color:green)%(taggerdate:local)±%(color:blue)%(taggername)±%(color:reset)%(subject)' refs/tags | column -t -s± | less -RFX
